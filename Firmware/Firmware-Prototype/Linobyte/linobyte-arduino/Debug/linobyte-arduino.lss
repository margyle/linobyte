
linobyte-arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002780  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  20000000  00002780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007a8  20000100  00002880  00020100  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  5 .debug_info   0004fd28  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005bd3  00000000  00000000  0006fea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000072cf  00000000  00000000  00075a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000878  00000000  00000000  0007cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001178  00000000  00000000  0007d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001bf6e  00000000  00000000  0007e73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c9c6  00000000  00000000  0009a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00080b8c  00000000  00000000  000a706f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001648  00000000  00000000  00127bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 e1 01 00 00 c9 01 00 00 c9 01 00 00     ... ............
	...
      2c:	c9 01 00 00 00 00 00 00 00 00 00 00 c9 01 00 00     ................
      3c:	35 02 00 00 c9 01 00 00 c9 01 00 00 c9 01 00 00     5...............
      4c:	c9 01 00 00 c9 01 00 00 c9 01 00 00 c9 01 00 00     ................
      5c:	cd 01 00 00 c9 01 00 00 1d 17 00 00 c9 01 00 00     ................
      6c:	c9 01 00 00 c9 01 00 00 c9 01 00 00 2d 17 00 00     ............-...
      7c:	c9 01 00 00 c9 01 00 00 c9 01 00 00 c9 01 00 00     ................
      8c:	c9 01 00 00 00 00 00 00 c9 01 00 00 c9 01 00 00     ................
      9c:	c9 01 00 00 c9 01 00 00 c9 01 00 00 c9 01 00 00     ................
      ac:	c9 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000100 	.word	0x20000100
      d4:	00000000 	.word	0x00000000
      d8:	0000277c 	.word	0x0000277c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000104 	.word	0x20000104
     108:	0000277c 	.word	0x0000277c
     10c:	200000fc 	.word	0x200000fc
     110:	00000000 	.word	0x00000000

00000114 <_Z10enableChari>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio



void enableChar(int _charToEnable){
     114:	b510      	push	{r4, lr}
	
	switch (_charToEnable)
     116:	2807      	cmp	r0, #7
     118:	d811      	bhi.n	13e <_Z10enableChari+0x2a>
     11a:	f001 ff67 	bl	1fec <__gnu_thumb1_case_uqi>
     11e:	1104      	.short	0x1104
     120:	271d1a14 	.word	0x271d1a14
     124:	302a      	.short	0x302a
	{
		case 0:
		digitalWrite(1,LOW); // A0
     126:	2100      	movs	r1, #0
     128:	2001      	movs	r0, #1
		digitalWrite(3,LOW); // A1
		digitalWrite(4,LOW); // A2
		break;
		case 1:
		digitalWrite(1,HIGH); // A0
     12a:	f001 fa6d 	bl	1608 <digitalWrite>
		digitalWrite(3,LOW); // A1
     12e:	2100      	movs	r1, #0
		digitalWrite(3,HIGH); // A1
		digitalWrite(4,LOW); // A2
		break;
		case 3:
		digitalWrite(1,HIGH); // A0
		digitalWrite(3,HIGH); // A1
     130:	2003      	movs	r0, #3
     132:	f001 fa69 	bl	1608 <digitalWrite>
		digitalWrite(4,LOW); // A2
     136:	2100      	movs	r1, #0
		digitalWrite(4,HIGH); // A2
		break;
		case 7:
		digitalWrite(1,HIGH); // A0
		digitalWrite(3,HIGH); // A1
		digitalWrite(4,HIGH); // A2
     138:	2004      	movs	r0, #4
     13a:	f001 fa65 	bl	1608 <digitalWrite>
		break;
	}
	
}
     13e:	bd10      	pop	{r4, pc}
		digitalWrite(1,HIGH); // A0
     140:	2101      	movs	r1, #1
     142:	0008      	movs	r0, r1
     144:	e7f1      	b.n	12a <_Z10enableChari+0x16>
		digitalWrite(1,LOW); // A0
     146:	2100      	movs	r1, #0
     148:	2001      	movs	r0, #1
		digitalWrite(1,HIGH); // A0
     14a:	f001 fa5d 	bl	1608 <digitalWrite>
		digitalWrite(3,HIGH); // A1
     14e:	2101      	movs	r1, #1
     150:	e7ee      	b.n	130 <_Z10enableChari+0x1c>
		digitalWrite(1,HIGH); // A0
     152:	2101      	movs	r1, #1
     154:	0008      	movs	r0, r1
     156:	e7f8      	b.n	14a <_Z10enableChari+0x36>
		digitalWrite(1,LOW); // A0
     158:	2100      	movs	r1, #0
     15a:	2001      	movs	r0, #1
		digitalWrite(1,HIGH); // A0
     15c:	f001 fa54 	bl	1608 <digitalWrite>
		digitalWrite(3,LOW); // A1
     160:	2100      	movs	r1, #0
		digitalWrite(3,HIGH); // A1
     162:	2003      	movs	r0, #3
     164:	f001 fa50 	bl	1608 <digitalWrite>
		digitalWrite(4,HIGH); // A2
     168:	2101      	movs	r1, #1
     16a:	e7e5      	b.n	138 <_Z10enableChari+0x24>
		digitalWrite(1,HIGH); // A0
     16c:	2101      	movs	r1, #1
     16e:	0008      	movs	r0, r1
     170:	e7f4      	b.n	15c <_Z10enableChari+0x48>
		digitalWrite(1,LOW); // A0
     172:	2100      	movs	r1, #0
     174:	2001      	movs	r0, #1
		digitalWrite(1,HIGH); // A0
     176:	f001 fa47 	bl	1608 <digitalWrite>
		digitalWrite(3,HIGH); // A1
     17a:	2101      	movs	r1, #1
     17c:	e7f1      	b.n	162 <_Z10enableChari+0x4e>
		digitalWrite(1,HIGH); // A0
     17e:	2101      	movs	r1, #1
     180:	0008      	movs	r0, r1
     182:	e7f8      	b.n	176 <_Z10enableChari+0x62>

00000184 <setup>:


void setup() {
     184:	b510      	push	{r4, lr}
	// put your setup code here, to run once:
	pinMode(0, OUTPUT);
     186:	2101      	movs	r1, #1
     188:	2000      	movs	r0, #0
     18a:	f001 f9f1 	bl	1570 <pinMode>
	pinMode(1, OUTPUT);
     18e:	2101      	movs	r1, #1
     190:	0008      	movs	r0, r1
     192:	f001 f9ed 	bl	1570 <pinMode>
	pinMode(3, OUTPUT);
     196:	2101      	movs	r1, #1
     198:	2003      	movs	r0, #3
     19a:	f001 f9e9 	bl	1570 <pinMode>
	pinMode(4, OUTPUT);
     19e:	2101      	movs	r1, #1
     1a0:	2004      	movs	r0, #4
     1a2:	f001 f9e5 	bl	1570 <pinMode>
	
	digitalWrite(0,HIGH);
     1a6:	2101      	movs	r1, #1
     1a8:	2000      	movs	r0, #0
     1aa:	f001 fa2d 	bl	1608 <digitalWrite>
}
     1ae:	bd10      	pop	{r4, pc}

000001b0 <loop>:

int decoderDelay = 100;

void loop() {
     1b0:	b510      	push	{r4, lr}
	// put your main code here, to run repeatedly:
	for (int i = 0; i<8;i++){
     1b2:	2400      	movs	r4, #0
		enableChar(i);
     1b4:	0020      	movs	r0, r4
     1b6:	f7ff ffad 	bl	114 <_Z10enableChari>
	for (int i = 0; i<8;i++){
     1ba:	3401      	adds	r4, #1
		delay(100);
     1bc:	2064      	movs	r0, #100	; 0x64
     1be:	f000 f847 	bl	250 <delay>
	for (int i = 0; i<8;i++){
     1c2:	2c08      	cmp	r4, #8
     1c4:	d1f6      	bne.n	1b4 <loop+0x4>
	}
	
}
     1c6:	bd10      	pop	{r4, pc}

000001c8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     1c8:	be03      	bkpt	0x0003
     1ca:	e7fe      	b.n	1ca <Dummy_Handler+0x2>

000001cc <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     1cc:	4b03      	ldr	r3, [pc, #12]	; (1dc <USB_Handler+0x10>)
{
     1ce:	b510      	push	{r4, lr}
  if (usb_isr)
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d000      	beq.n	1d8 <USB_Handler+0xc>
    usb_isr();
     1d6:	4798      	blx	r3
}
     1d8:	bd10      	pop	{r4, pc}
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	2000011c 	.word	0x2000011c

000001e0 <Reset_Handler>:
{
     1e0:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1e2:	490f      	ldr	r1, [pc, #60]	; (220 <Reset_Handler+0x40>)
     1e4:	4c0f      	ldr	r4, [pc, #60]	; (224 <Reset_Handler+0x44>)
     1e6:	42a1      	cmp	r1, r4
     1e8:	d104      	bne.n	1f4 <Reset_Handler+0x14>
  SystemInit();
     1ea:	f000 f8b7 	bl	35c <SystemInit>
  main();
     1ee:	f000 f84b 	bl	288 <main>
     1f2:	e7fe      	b.n	1f2 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1f4:	4d0c      	ldr	r5, [pc, #48]	; (228 <Reset_Handler+0x48>)
     1f6:	2300      	movs	r3, #0
     1f8:	428d      	cmp	r5, r1
     1fa:	d0f6      	beq.n	1ea <Reset_Handler+0xa>
     1fc:	18ca      	adds	r2, r1, r3
     1fe:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     200:	42a2      	cmp	r2, r4
     202:	d305      	bcc.n	210 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     204:	4290      	cmp	r0, r2
     206:	d0f0      	beq.n	1ea <Reset_Handler+0xa>
     208:	4b08      	ldr	r3, [pc, #32]	; (22c <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     20a:	4909      	ldr	r1, [pc, #36]	; (230 <Reset_Handler+0x50>)
      *pDest = 0;
     20c:	2200      	movs	r2, #0
     20e:	e004      	b.n	21a <Reset_Handler+0x3a>
      *pDest = *pSrc;
     210:	6800      	ldr	r0, [r0, #0]
     212:	3304      	adds	r3, #4
     214:	6010      	str	r0, [r2, #0]
     216:	e7f1      	b.n	1fc <Reset_Handler+0x1c>
      *pDest = 0;
     218:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     21a:	428b      	cmp	r3, r1
     21c:	d3fc      	bcc.n	218 <Reset_Handler+0x38>
     21e:	e7e4      	b.n	1ea <Reset_Handler+0xa>
     220:	20000000 	.word	0x20000000
     224:	20000100 	.word	0x20000100
     228:	00002780 	.word	0x00002780
     22c:	20000100 	.word	0x20000100
     230:	200008a8 	.word	0x200008a8

00000234 <SysTick_Handler>:
{
     234:	b510      	push	{r4, lr}
  if (sysTickHook())
     236:	f000 f824 	bl	282 <sysTickHook>
     23a:	2800      	cmp	r0, #0
     23c:	d101      	bne.n	242 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     23e:	f000 f815 	bl	26c <SysTick_DefaultHandler>
}
     242:	bd10      	pop	{r4, pc}

00000244 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     244:	4b01      	ldr	r3, [pc, #4]	; (24c <USB_SetHandler+0x8>)
     246:	6018      	str	r0, [r3, #0]
}
     248:	4770      	bx	lr
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	2000011c 	.word	0x2000011c

00000250 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     250:	b570      	push	{r4, r5, r6, lr}
     252:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     254:	d007      	beq.n	266 <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     256:	4d04      	ldr	r5, [pc, #16]	; (268 <delay+0x18>)
     258:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     25a:	f000 f811 	bl	280 <yield>
  } while ( _ulTickCount - start < ms ) ;
     25e:	682b      	ldr	r3, [r5, #0]
     260:	1b9b      	subs	r3, r3, r6
     262:	429c      	cmp	r4, r3
     264:	d8f9      	bhi.n	25a <delay+0xa>
}
     266:	bd70      	pop	{r4, r5, r6, pc}
     268:	20000120 	.word	0x20000120

0000026c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     26c:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     26e:	4a03      	ldr	r2, [pc, #12]	; (27c <SysTick_DefaultHandler+0x10>)
     270:	6813      	ldr	r3, [r2, #0]
     272:	3301      	adds	r3, #1
     274:	6013      	str	r3, [r2, #0]
  tickReset();
     276:	f000 f835 	bl	2e4 <tickReset>
}
     27a:	bd10      	pop	{r4, pc}
     27c:	20000120 	.word	0x20000120

00000280 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     280:	4770      	bx	lr

00000282 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     282:	2000      	movs	r0, #0
     284:	4770      	bx	lr

00000286 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     286:	4770      	bx	lr

00000288 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     288:	b510      	push	{r4, lr}
  init();
     28a:	f001 f8c7 	bl	141c <init>

  __libc_init_array();
     28e:	f001 ff43 	bl	2118 <__libc_init_array>

  initVariant();
     292:	f7ff fff8 	bl	286 <_Z11initVariantv>

  delay(1);
     296:	2001      	movs	r0, #1
     298:	f7ff ffda 	bl	250 <delay>
#if defined(USBCON)
  USBDevice.init();
     29c:	4c08      	ldr	r4, [pc, #32]	; (2c0 <main+0x38>)
     29e:	0020      	movs	r0, r4
     2a0:	f000 fb4c 	bl	93c <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     2a4:	0020      	movs	r0, r4
     2a6:	f000 fbc1 	bl	a2c <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     2aa:	f7ff ff6b 	bl	184 <setup>

  for (;;)
  {
    loop();
     2ae:	f7ff ff7f 	bl	1b0 <loop>
    if (serialEventRun) serialEventRun();
     2b2:	4b04      	ldr	r3, [pc, #16]	; (2c4 <main+0x3c>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0fa      	beq.n	2ae <main+0x26>
     2b8:	e000      	b.n	2bc <main+0x34>
     2ba:	bf00      	nop
     2bc:	e7f7      	b.n	2ae <main+0x26>
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	20000124 	.word	0x20000124
     2c4:	00000000 	.word	0x00000000

000002c8 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     2c8:	4b01      	ldr	r3, [pc, #4]	; (2d0 <initiateReset+0x8>)
     2ca:	6018      	str	r0, [r3, #0]
}
     2cc:	4770      	bx	lr
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	20000000 	.word	0x20000000

000002d4 <cancelReset>:

void cancelReset() {
	ticks = -1;
     2d4:	2201      	movs	r2, #1
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <cancelReset+0xc>)
     2d8:	4252      	negs	r2, r2
     2da:	601a      	str	r2, [r3, #0]
}
     2dc:	4770      	bx	lr
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	20000000 	.word	0x20000000

000002e4 <tickReset>:

void tickReset() {
	if (ticks == -1)
     2e4:	4a16      	ldr	r2, [pc, #88]	; (340 <tickReset+0x5c>)
void tickReset() {
     2e6:	b510      	push	{r4, lr}
	if (ticks == -1)
     2e8:	6813      	ldr	r3, [r2, #0]
     2ea:	1c59      	adds	r1, r3, #1
     2ec:	d027      	beq.n	33e <tickReset+0x5a>
		return;
	ticks--;
     2ee:	3b01      	subs	r3, #1
     2f0:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     2f2:	2b00      	cmp	r3, #0
     2f4:	d123      	bne.n	33e <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     2f6:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     2f8:	4b12      	ldr	r3, [pc, #72]	; (344 <tickReset+0x60>)
     2fa:	4a13      	ldr	r2, [pc, #76]	; (348 <tickReset+0x64>)
     2fc:	3304      	adds	r3, #4
     2fe:	4293      	cmp	r3, r2
     300:	d808      	bhi.n	314 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     302:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     306:	4a11      	ldr	r2, [pc, #68]	; (34c <tickReset+0x68>)
     308:	4b11      	ldr	r3, [pc, #68]	; (350 <tickReset+0x6c>)
     30a:	60da      	str	r2, [r3, #12]
     30c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     310:	46c0      	nop			; (mov r8, r8)
     312:	e7fd      	b.n	310 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     314:	4a0f      	ldr	r2, [pc, #60]	; (354 <tickReset+0x70>)
	while (!nvmReady())
     316:	2101      	movs	r1, #1
     318:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     31a:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     31c:	420c      	tst	r4, r1
     31e:	d0fc      	beq.n	31a <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     320:	2120      	movs	r1, #32
     322:	8b14      	ldrh	r4, [r2, #24]
     324:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     326:	089b      	lsrs	r3, r3, #2
     328:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     32a:	4321      	orrs	r1, r4
     32c:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     32e:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <tickReset+0x74>)
     332:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     334:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     336:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     338:	421a      	tst	r2, r3
     33a:	d0fc      	beq.n	336 <tickReset+0x52>
     33c:	e7e1      	b.n	302 <tickReset+0x1e>
		banzai();
}
     33e:	bd10      	pop	{r4, pc}
     340:	20000000 	.word	0x20000000
     344:	00000000 	.word	0x00000000
     348:	00000203 	.word	0x00000203
     34c:	05fa0004 	.word	0x05fa0004
     350:	e000ed00 	.word	0xe000ed00
     354:	41004000 	.word	0x41004000
     358:	ffffa502 	.word	0xffffa502

0000035c <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     35c:	221e      	movs	r2, #30
{
     35e:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     360:	4846      	ldr	r0, [pc, #280]	; (47c <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     362:	4947      	ldr	r1, [pc, #284]	; (480 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     364:	6843      	ldr	r3, [r0, #4]
     366:	4393      	bics	r3, r2
     368:	3a1c      	subs	r2, #28
     36a:	4313      	orrs	r3, r2
     36c:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     36e:	2308      	movs	r3, #8
     370:	698c      	ldr	r4, [r1, #24]
     372:	4323      	orrs	r3, r4
     374:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     376:	4c43      	ldr	r4, [pc, #268]	; (484 <SystemInit+0x128>)
     378:	4b43      	ldr	r3, [pc, #268]	; (488 <SystemInit+0x12c>)
     37a:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     37c:	8a9c      	ldrh	r4, [r3, #20]
     37e:	4314      	orrs	r4, r2
     380:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     382:	68dc      	ldr	r4, [r3, #12]
     384:	4214      	tst	r4, r2
     386:	d0fc      	beq.n	382 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     388:	2401      	movs	r4, #1
     38a:	4a40      	ldr	r2, [pc, #256]	; (48c <SystemInit+0x130>)
     38c:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     38e:	7815      	ldrb	r5, [r2, #0]
     390:	4225      	tst	r5, r4
     392:	d003      	beq.n	39c <SystemInit+0x40>
     394:	7855      	ldrb	r5, [r2, #1]
     396:	b26d      	sxtb	r5, r5
     398:	2d00      	cmp	r5, #0
     39a:	dbf8      	blt.n	38e <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     39c:	2401      	movs	r4, #1
     39e:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3a0:	7854      	ldrb	r4, [r2, #1]
     3a2:	b264      	sxtb	r4, r4
     3a4:	2c00      	cmp	r4, #0
     3a6:	dbfb      	blt.n	3a0 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     3a8:	4c39      	ldr	r4, [pc, #228]	; (490 <SystemInit+0x134>)
     3aa:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3ac:	7854      	ldrb	r4, [r2, #1]
     3ae:	b264      	sxtb	r4, r4
     3b0:	2c00      	cmp	r4, #0
     3b2:	dbfb      	blt.n	3ac <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     3b4:	2482      	movs	r4, #130	; 0x82
     3b6:	01e4      	lsls	r4, r4, #7
     3b8:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3ba:	7854      	ldrb	r4, [r2, #1]
     3bc:	b264      	sxtb	r4, r4
     3be:	2c00      	cmp	r4, #0
     3c0:	dbfb      	blt.n	3ba <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     3c2:	2402      	movs	r4, #2
     3c4:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3c6:	340e      	adds	r4, #14
     3c8:	68dd      	ldr	r5, [r3, #12]
     3ca:	4225      	tst	r5, r4
     3cc:	d0fc      	beq.n	3c8 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     3ce:	4c31      	ldr	r4, [pc, #196]	; (494 <SystemInit+0x138>)
     3d0:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3d2:	2410      	movs	r4, #16
     3d4:	68dd      	ldr	r5, [r3, #12]
     3d6:	4225      	tst	r5, r4
     3d8:	d0fc      	beq.n	3d4 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     3da:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     3dc:	4c2e      	ldr	r4, [pc, #184]	; (498 <SystemInit+0x13c>)
     3de:	432c      	orrs	r4, r5
     3e0:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3e2:	2410      	movs	r4, #16
     3e4:	68dd      	ldr	r5, [r3, #12]
     3e6:	4225      	tst	r5, r4
     3e8:	d0fc      	beq.n	3e4 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     3ea:	2402      	movs	r4, #2
     3ec:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     3ee:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     3f0:	432c      	orrs	r4, r5
     3f2:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     3f4:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     3f6:	68dd      	ldr	r5, [r3, #12]
     3f8:	4235      	tst	r5, r6
     3fa:	d0fc      	beq.n	3f6 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     3fc:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     3fe:	4225      	tst	r5, r4
     400:	d0f9      	beq.n	3f6 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     402:	2410      	movs	r4, #16
     404:	68dd      	ldr	r5, [r3, #12]
     406:	4225      	tst	r5, r4
     408:	d0fc      	beq.n	404 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     40a:	2400      	movs	r4, #0
     40c:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     40e:	7854      	ldrb	r4, [r2, #1]
     410:	b264      	sxtb	r4, r4
     412:	2c00      	cmp	r4, #0
     414:	dbfb      	blt.n	40e <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     416:	4c21      	ldr	r4, [pc, #132]	; (49c <SystemInit+0x140>)
     418:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     41a:	7854      	ldrb	r4, [r2, #1]
     41c:	b264      	sxtb	r4, r4
     41e:	2c00      	cmp	r4, #0
     420:	dbfb      	blt.n	41a <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     422:	6a1c      	ldr	r4, [r3, #32]
     424:	4d1e      	ldr	r5, [pc, #120]	; (4a0 <SystemInit+0x144>)
     426:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     428:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     42a:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     42c:	6a1c      	ldr	r4, [r3, #32]
     42e:	43ac      	bics	r4, r5
     430:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     432:	2303      	movs	r3, #3
     434:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     436:	4b1b      	ldr	r3, [pc, #108]	; (4a4 <SystemInit+0x148>)
     438:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     43a:	7853      	ldrb	r3, [r2, #1]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	dbfb      	blt.n	43a <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     442:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     444:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     446:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     448:	4a17      	ldr	r2, [pc, #92]	; (4a8 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     44a:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     44c:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     44e:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     450:	4b16      	ldr	r3, [pc, #88]	; (4ac <SystemInit+0x150>)
     452:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     454:	4b16      	ldr	r3, [pc, #88]	; (4b0 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     456:	4a17      	ldr	r2, [pc, #92]	; (4b4 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     458:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     45a:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     45c:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     45e:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     460:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     462:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     464:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     466:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     468:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     46a:	4313      	orrs	r3, r2
     46c:	4a12      	ldr	r2, [pc, #72]	; (4b8 <SystemInit+0x15c>)
     46e:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     470:	2380      	movs	r3, #128	; 0x80
     472:	6842      	ldr	r2, [r0, #4]
     474:	4313      	orrs	r3, r2
     476:	6043      	str	r3, [r0, #4]
}
     478:	bd70      	pop	{r4, r5, r6, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	41004000 	.word	0x41004000
     480:	40000400 	.word	0x40000400
     484:	0000060c 	.word	0x0000060c
     488:	40000800 	.word	0x40000800
     48c:	40000c00 	.word	0x40000c00
     490:	00010501 	.word	0x00010501
     494:	7dff05b9 	.word	0x7dff05b9
     498:	00000a04 	.word	0x00000a04
     49c:	00030700 	.word	0x00030700
     4a0:	fffffcff 	.word	0xfffffcff
     4a4:	00010603 	.word	0x00010603
     4a8:	02dc6c00 	.word	0x02dc6c00
     4ac:	2000002c 	.word	0x2000002c
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
     4b8:	42004000 	.word	0x42004000

000004bc <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
     4bc:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     4be:	250f      	movs	r5, #15
     4c0:	1dcb      	adds	r3, r1, #7
     4c2:	3901      	subs	r1, #1
     4c4:	0002      	movs	r2, r0
     4c6:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     4c8:	0014      	movs	r4, r2
		val = (val >> 4);
     4ca:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     4cc:	3430      	adds	r4, #48	; 0x30
     4ce:	2a09      	cmp	r2, #9
     4d0:	dd01      	ble.n	4d6 <_ZL5utox8mPc+0x1a>
     4d2:	3237      	adds	r2, #55	; 0x37
     4d4:	0014      	movs	r4, r2
     4d6:	701c      	strb	r4, [r3, #0]
     4d8:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     4da:	428b      	cmp	r3, r1
     4dc:	d1f2      	bne.n	4c4 <_ZL5utox8mPc+0x8>
	}
}
     4de:	bd30      	pop	{r4, r5, pc}

000004e0 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     4e0:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     4e2:	2982      	cmp	r1, #130	; 0x82
     4e4:	d11f      	bne.n	526 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     4e6:	b2c3      	uxtb	r3, r0
     4e8:	4d2c      	ldr	r5, [pc, #176]	; (59c <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
     4ea:	015a      	lsls	r2, r3, #5
     4ec:	18aa      	adds	r2, r5, r2
     4ee:	6991      	ldr	r1, [r2, #24]
     4f0:	4c2b      	ldr	r4, [pc, #172]	; (5a0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     4f2:	0180      	lsls	r0, r0, #6
     4f4:	400c      	ands	r4, r1
     4f6:	21c0      	movs	r1, #192	; 0xc0
     4f8:	0589      	lsls	r1, r1, #22
     4fa:	4321      	orrs	r1, r4
     4fc:	6191      	str	r1, [r2, #24]
     4fe:	4929      	ldr	r1, [pc, #164]	; (5a4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     500:	3308      	adds	r3, #8
     502:	1808      	adds	r0, r1, r0
     504:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     506:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     508:	682a      	ldr	r2, [r5, #0]
     50a:	015b      	lsls	r3, r3, #5
     50c:	18d0      	adds	r0, r2, r3
     50e:	7904      	ldrb	r4, [r0, #4]
     510:	4249      	negs	r1, r1
     512:	4321      	orrs	r1, r4
     514:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     516:	2070      	movs	r0, #112	; 0x70
     518:	5c99      	ldrb	r1, [r3, r2]
     51a:	4381      	bics	r1, r0
     51c:	0008      	movs	r0, r1
     51e:	2130      	movs	r1, #48	; 0x30
     520:	4301      	orrs	r1, r0
     522:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     524:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     526:	2900      	cmp	r1, #0
     528:	d1fc      	bne.n	524 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     52a:	24c0      	movs	r4, #192	; 0xc0
     52c:	b2c1      	uxtb	r1, r0
     52e:	4e1b      	ldr	r6, [pc, #108]	; (59c <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
     530:	014b      	lsls	r3, r1, #5
     532:	18f3      	adds	r3, r6, r3
     534:	689a      	ldr	r2, [r3, #8]
     536:	4d1a      	ldr	r5, [pc, #104]	; (5a0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
     538:	05a4      	lsls	r4, r4, #22
     53a:	402a      	ands	r2, r5
     53c:	4322      	orrs	r2, r4
     53e:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     540:	4a19      	ldr	r2, [pc, #100]	; (5a8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
     542:	0180      	lsls	r0, r0, #6
     544:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     546:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     548:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     54a:	6830      	ldr	r0, [r6, #0]
     54c:	2607      	movs	r6, #7
     54e:	3208      	adds	r2, #8
     550:	0152      	lsls	r2, r2, #5
     552:	5c11      	ldrb	r1, [r2, r0]
     554:	43b1      	bics	r1, r6
     556:	000e      	movs	r6, r1
     558:	2101      	movs	r1, #1
     55a:	4331      	orrs	r1, r6
     55c:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     55e:	6999      	ldr	r1, [r3, #24]
     560:	400d      	ands	r5, r1
     562:	432c      	orrs	r4, r5
     564:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     566:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     568:	490e      	ldr	r1, [pc, #56]	; (5a4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
     56a:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     56c:	5c11      	ldrb	r1, [r2, r0]
     56e:	43a1      	bics	r1, r4
     570:	000c      	movs	r4, r1
     572:	2110      	movs	r1, #16
     574:	4321      	orrs	r1, r4
     576:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     578:	6899      	ldr	r1, [r3, #8]
     57a:	4c0c      	ldr	r4, [pc, #48]	; (5ac <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     57c:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     57e:	400c      	ands	r4, r1
     580:	2180      	movs	r1, #128	; 0x80
     582:	0349      	lsls	r1, r1, #13
     584:	4321      	orrs	r1, r4
     586:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     588:	6899      	ldr	r1, [r3, #8]
     58a:	0b89      	lsrs	r1, r1, #14
     58c:	0389      	lsls	r1, r1, #14
     58e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     590:	2340      	movs	r3, #64	; 0x40
     592:	7951      	ldrb	r1, [r2, #5]
     594:	430b      	orrs	r3, r1
     596:	7153      	strb	r3, [r2, #5]
     598:	e7c4      	b.n	524 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	200005dc 	.word	0x200005dc
     5a0:	8fffffff 	.word	0x8fffffff
     5a4:	20000150 	.word	0x20000150
     5a8:	20000310 	.word	0x20000310
     5ac:	f0003fff 	.word	0xf0003fff

000005b0 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     5b0:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     5b2:	0004      	movs	r4, r0
     5b4:	2301      	movs	r3, #1
     5b6:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
     5b8:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
     5ba:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
     5bc:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
     5be:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     5c0:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     5c2:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
     5c4:	0052      	lsls	r2, r2, #1
     5c6:	f001 fdde 	bl	2186 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     5ca:	78ab      	ldrb	r3, [r5, #2]
     5cc:	07db      	lsls	r3, r3, #31
     5ce:	d4fc      	bmi.n	5ca <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
     5d0:	626c      	str	r4, [r5, #36]	; 0x24
}
     5d2:	bd70      	pop	{r4, r5, r6, pc}

000005d4 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     5d4:	221f      	movs	r2, #31
     5d6:	4b14      	ldr	r3, [pc, #80]	; (628 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
     5d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     5da:	681b      	ldr	r3, [r3, #0]
     5dc:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     5de:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     5e0:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     5e2:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     5e4:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     5e6:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
     5e8:	291f      	cmp	r1, #31
     5ea:	d100      	bne.n	5ee <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     5ec:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     5ee:	2a1f      	cmp	r2, #31
     5f0:	d100      	bne.n	5f4 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     5f2:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     5f4:	2b07      	cmp	r3, #7
     5f6:	d100      	bne.n	5fa <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     5f8:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     5fa:	251f      	movs	r5, #31
     5fc:	6800      	ldr	r0, [r0, #0]
     5fe:	018e      	lsls	r6, r1, #6
     600:	8d04      	ldrh	r4, [r0, #40]	; 0x28
     602:	490a      	ldr	r1, [pc, #40]	; (62c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     604:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
     606:	4021      	ands	r1, r4
     608:	4331      	orrs	r1, r6
     60a:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     60c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
     60e:	0014      	movs	r4, r2
     610:	000a      	movs	r2, r1
     612:	43aa      	bics	r2, r5
     614:	4322      	orrs	r2, r4
     616:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     618:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     61a:	0319      	lsls	r1, r3, #12
     61c:	4b04      	ldr	r3, [pc, #16]	; (630 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     61e:	4013      	ands	r3, r2
     620:	430b      	orrs	r3, r1
     622:	8503      	strh	r3, [r0, #40]	; 0x28
}
     624:	bd70      	pop	{r4, r5, r6, pc}
     626:	46c0      	nop			; (mov r8, r8)
     628:	00806024 	.word	0x00806024
     62c:	fffff83f 	.word	0xfffff83f
     630:	ffff8fff 	.word	0xffff8fff

00000634 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     634:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     638:	6003      	str	r3, [r0, #0]
     63a:	2301      	movs	r3, #1
     63c:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     63e:	b672      	cpsid	i
		__disable_irq();
	}
     640:	4770      	bx	lr

00000642 <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     642:	6803      	ldr	r3, [r0, #0]
     644:	2b00      	cmp	r3, #0
     646:	d102      	bne.n	64e <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     648:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     64a:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     64e:	4770      	bx	lr

00000650 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     650:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     652:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
     654:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
     656:	4668      	mov	r0, sp
		if (current == 0) {
     658:	2d00      	cmp	r5, #0
     65a:	d114      	bne.n	686 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
     65c:	f7ff ffea 	bl	634 <_ZN7__GuardC1Ev>
     660:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     662:	1d62      	adds	r2, r4, #5
			synchronized {
     664:	3b01      	subs	r3, #1
     666:	d302      	bcc.n	66e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     668:	7fd5      	ldrb	r5, [r2, #31]
     66a:	b2ed      	uxtb	r5, r5
     66c:	e7fa      	b.n	664 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
     66e:	4668      	mov	r0, sp
     670:	9301      	str	r3, [sp, #4]
     672:	f7ff ffe6 	bl	642 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     676:	2d00      	cmp	r5, #0
     678:	d101      	bne.n	67e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     67a:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     67c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
     67e:	6a20      	ldr	r0, [r4, #32]
     680:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
     682:	1ac0      	subs	r0, r0, r3
     684:	e7fa      	b.n	67c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
     686:	f7ff ffd5 	bl	634 <_ZN7__GuardC1Ev>
				ready = ready1;
     68a:	0022      	movs	r2, r4
			bool ready = false;
     68c:	2500      	movs	r5, #0
     68e:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     690:	3234      	adds	r2, #52	; 0x34
			synchronized {
     692:	3b01      	subs	r3, #1
     694:	d302      	bcc.n	69c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
     696:	7815      	ldrb	r5, [r2, #0]
     698:	b2ed      	uxtb	r5, r5
			synchronized {
     69a:	e7fa      	b.n	692 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
     69c:	4668      	mov	r0, sp
     69e:	9301      	str	r3, [sp, #4]
     6a0:	f7ff ffcf 	bl	642 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     6a4:	2d00      	cmp	r5, #0
     6a6:	d0e8      	beq.n	67a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     6a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
     6aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     6ac:	e7e9      	b.n	682 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

000006b0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
     6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     6b2:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
     6b4:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     6b6:	7a03      	ldrb	r3, [r0, #8]
     6b8:	6831      	ldr	r1, [r6, #0]
     6ba:	015a      	lsls	r2, r3, #5
     6bc:	188c      	adds	r4, r1, r2
     6be:	34ff      	adds	r4, #255	; 0xff
     6c0:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     6c2:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     6c4:	433d      	orrs	r5, r7
     6c6:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
     6c8:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     6ca:	4d09      	ldr	r5, [pc, #36]	; (6f0 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
     6cc:	6890      	ldr	r0, [r2, #8]
     6ce:	04a4      	lsls	r4, r4, #18
     6d0:	4028      	ands	r0, r5
     6d2:	0924      	lsrs	r4, r4, #4
     6d4:	4320      	orrs	r0, r4
     6d6:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     6d8:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     6da:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     6dc:	0b80      	lsrs	r0, r0, #14
     6de:	0380      	lsls	r0, r0, #14
     6e0:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     6e2:	2240      	movs	r2, #64	; 0x40
     6e4:	015b      	lsls	r3, r3, #5
     6e6:	18cb      	adds	r3, r1, r3
     6e8:	7919      	ldrb	r1, [r3, #4]
     6ea:	430a      	orrs	r2, r1
     6ec:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f0:	f0003fff 	.word	0xf0003fff

000006f4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
     6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     6f6:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
     6f8:	0004      	movs	r4, r0
     6fa:	000e      	movs	r6, r1
     6fc:	0017      	movs	r7, r2
			synchronized {
     6fe:	4668      	mov	r0, sp
		if (current == 0) {
     700:	2b00      	cmp	r3, #0
     702:	d13d      	bne.n	780 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
     704:	f7ff ff96 	bl	634 <_ZN7__GuardC1Ev>
     708:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     70a:	1d61      	adds	r1, r4, #5
     70c:	3b01      	subs	r3, #1
			synchronized {
     70e:	1c5a      	adds	r2, r3, #1
     710:	d00c      	beq.n	72c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
     712:	7fcd      	ldrb	r5, [r1, #31]
     714:	1e5a      	subs	r2, r3, #1
     716:	b2ed      	uxtb	r5, r5
     718:	2d00      	cmp	r5, #0
     71a:	d105      	bne.n	728 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
     71c:	4668      	mov	r0, sp
     71e:	9301      	str	r3, [sp, #4]
     720:	f7ff ff8f 	bl	642 <_ZN7__GuardD1Ev>
	}
     724:	0028      	movs	r0, r5
     726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     728:	0013      	movs	r3, r2
     72a:	e7f0      	b.n	70e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
     72c:	4668      	mov	r0, sp
     72e:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
     730:	2500      	movs	r5, #0
			synchronized {
     732:	f7ff ff86 	bl	642 <_ZN7__GuardD1Ev>
     736:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
     738:	42af      	cmp	r7, r5
     73a:	d002      	beq.n	742 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
     73c:	6a22      	ldr	r2, [r4, #32]
     73e:	4293      	cmp	r3, r2
     740:	d357      	bcc.n	7f2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
     742:	6a22      	ldr	r2, [r4, #32]
     744:	4293      	cmp	r3, r2
     746:	d1ed      	bne.n	724 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
     748:	2300      	movs	r3, #0
     74a:	61e3      	str	r3, [r4, #28]
				current = 1;
     74c:	3301      	adds	r3, #1
     74e:	6123      	str	r3, [r4, #16]
				synchronized {
     750:	4668      	mov	r0, sp
     752:	f7ff ff6f 	bl	634 <_ZN7__GuardC1Ev>
					if (notify) {
     756:	0022      	movs	r2, r4
					ready0 = false;
     758:	2100      	movs	r1, #0
     75a:	9b01      	ldr	r3, [sp, #4]
     75c:	1d67      	adds	r7, r4, #5
     75e:	3b01      	subs	r3, #1
					if (notify) {
     760:	3235      	adds	r2, #53	; 0x35
				synchronized {
     762:	1c58      	adds	r0, r3, #1
     764:	d0da      	beq.n	71c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
     766:	77f9      	strb	r1, [r7, #31]
					if (notify) {
     768:	7810      	ldrb	r0, [r2, #0]
     76a:	1e5e      	subs	r6, r3, #1
     76c:	2800      	cmp	r0, #0
     76e:	d005      	beq.n	77c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
     770:	7011      	strb	r1, [r2, #0]
						release();
     772:	0020      	movs	r0, r4
     774:	9301      	str	r3, [sp, #4]
     776:	f7ff ff9b 	bl	6b0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     77a:	e7ec      	b.n	756 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
     77c:	0033      	movs	r3, r6
     77e:	e7f0      	b.n	762 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
     780:	f7ff ff58 	bl	634 <_ZN7__GuardC1Ev>
				if (!ready1) {
     784:	0021      	movs	r1, r4
     786:	9b01      	ldr	r3, [sp, #4]
     788:	3134      	adds	r1, #52	; 0x34
     78a:	3b01      	subs	r3, #1
			synchronized {
     78c:	1c5a      	adds	r2, r3, #1
     78e:	d006      	beq.n	79e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
     790:	780d      	ldrb	r5, [r1, #0]
     792:	1e5a      	subs	r2, r3, #1
     794:	b2ed      	uxtb	r5, r5
     796:	2d00      	cmp	r5, #0
     798:	d0c0      	beq.n	71c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
     79a:	0013      	movs	r3, r2
     79c:	e7f6      	b.n	78c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
     79e:	4668      	mov	r0, sp
     7a0:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
     7a2:	2500      	movs	r5, #0
			synchronized {
     7a4:	f7ff ff4d 	bl	642 <_ZN7__GuardD1Ev>
     7a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
     7aa:	42bd      	cmp	r5, r7
     7ac:	d002      	beq.n	7b4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
     7ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
     7b0:	4293      	cmp	r3, r2
     7b2:	d326      	bcc.n	802 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
     7b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
     7b6:	4293      	cmp	r3, r2
     7b8:	d1b4      	bne.n	724 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
     7ba:	2300      	movs	r3, #0
				synchronized {
     7bc:	4668      	mov	r0, sp
				first1 = 0;
     7be:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     7c0:	6123      	str	r3, [r4, #16]
				synchronized {
     7c2:	f7ff ff37 	bl	634 <_ZN7__GuardC1Ev>
					ready1 = false;
     7c6:	0027      	movs	r7, r4
					if (notify) {
     7c8:	0022      	movs	r2, r4
					ready1 = false;
     7ca:	2100      	movs	r1, #0
     7cc:	9b01      	ldr	r3, [sp, #4]
     7ce:	3734      	adds	r7, #52	; 0x34
     7d0:	3b01      	subs	r3, #1
					if (notify) {
     7d2:	3235      	adds	r2, #53	; 0x35
				synchronized {
     7d4:	1c58      	adds	r0, r3, #1
     7d6:	d0a1      	beq.n	71c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
     7d8:	7039      	strb	r1, [r7, #0]
					if (notify) {
     7da:	7810      	ldrb	r0, [r2, #0]
     7dc:	1e5e      	subs	r6, r3, #1
     7de:	2800      	cmp	r0, #0
     7e0:	d005      	beq.n	7ee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
     7e2:	7011      	strb	r1, [r2, #0]
						release();
     7e4:	0020      	movs	r0, r4
     7e6:	9301      	str	r3, [sp, #4]
     7e8:	f7ff ff62 	bl	6b0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     7ec:	e7eb      	b.n	7c6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
     7ee:	0033      	movs	r3, r6
     7f0:	e7f0      	b.n	7d4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
     7f2:	1c5a      	adds	r2, r3, #1
     7f4:	61e2      	str	r2, [r4, #28]
     7f6:	69a2      	ldr	r2, [r4, #24]
     7f8:	18d3      	adds	r3, r2, r3
     7fa:	781b      	ldrb	r3, [r3, #0]
     7fc:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
     7fe:	3501      	adds	r5, #1
     800:	e799      	b.n	736 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
     802:	1c5a      	adds	r2, r3, #1
     804:	62e2      	str	r2, [r4, #44]	; 0x2c
     806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     808:	18d3      	adds	r3, r2, r3
     80a:	781b      	ldrb	r3, [r3, #0]
     80c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
     80e:	3501      	adds	r5, #1
     810:	e7ca      	b.n	7a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00000812 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     814:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
     816:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     818:	0011      	movs	r1, r2
	virtual void handleEndpoint()
     81a:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     81c:	3108      	adds	r1, #8
     81e:	6818      	ldr	r0, [r3, #0]
     820:	0149      	lsls	r1, r1, #5
     822:	1841      	adds	r1, r0, r1
     824:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     826:	07c0      	lsls	r0, r0, #31
     828:	d527      	bpl.n	87a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     82a:	2501      	movs	r5, #1
     82c:	0152      	lsls	r2, r2, #5
     82e:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     830:	189b      	adds	r3, r3, r2
     832:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
     834:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     836:	0492      	lsls	r2, r2, #18
     838:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
     83a:	2900      	cmp	r1, #0
     83c:	d121      	bne.n	882 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
     83e:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
     840:	6a22      	ldr	r2, [r4, #32]
     842:	2a00      	cmp	r2, #0
     844:	d03e      	beq.n	8c4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     846:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
     848:	6165      	str	r5, [r4, #20]
					synchronized {
     84a:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     84c:	605a      	str	r2, [r3, #4]
					synchronized {
     84e:	f7ff fef1 	bl	634 <_ZN7__GuardC1Ev>
						if (ready1) {
     852:	0027      	movs	r7, r4
     854:	0021      	movs	r1, r4
     856:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
     858:	1d66      	adds	r6, r4, #5
     85a:	3b01      	subs	r3, #1
						if (ready1) {
     85c:	3734      	adds	r7, #52	; 0x34
     85e:	3135      	adds	r1, #53	; 0x35
					synchronized {
     860:	1c5a      	adds	r2, r3, #1
     862:	d02b      	beq.n	8bc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
     864:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
     866:	783a      	ldrb	r2, [r7, #0]
     868:	1e58      	subs	r0, r3, #1
     86a:	b2d2      	uxtb	r2, r2
     86c:	2a00      	cmp	r2, #0
     86e:	d005      	beq.n	87c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
     870:	9301      	str	r3, [sp, #4]
							return;
     872:	4668      	mov	r0, sp
							notify = true;
     874:	700d      	strb	r5, [r1, #0]
							return;
     876:	f7ff fee4 	bl	642 <_ZN7__GuardD1Ev>
	}
     87a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
     87c:	700a      	strb	r2, [r1, #0]
					synchronized {
     87e:	0003      	movs	r3, r0
     880:	e7ee      	b.n	860 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
     882:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
     884:	6b22      	ldr	r2, [r4, #48]	; 0x30
     886:	2a00      	cmp	r2, #0
     888:	d01c      	beq.n	8c4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
     88a:	2200      	movs	r2, #0
     88c:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     88e:	69a2      	ldr	r2, [r4, #24]
					synchronized {
     890:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     892:	605a      	str	r2, [r3, #4]
					synchronized {
     894:	f7ff fece 	bl	634 <_ZN7__GuardC1Ev>
						ready1 = true;
     898:	0026      	movs	r6, r4
     89a:	0021      	movs	r1, r4
     89c:	9b01      	ldr	r3, [sp, #4]
     89e:	3634      	adds	r6, #52	; 0x34
     8a0:	3b01      	subs	r3, #1
						if (ready0) {
     8a2:	1d67      	adds	r7, r4, #5
     8a4:	3135      	adds	r1, #53	; 0x35
					synchronized {
     8a6:	1c5a      	adds	r2, r3, #1
     8a8:	d008      	beq.n	8bc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
     8aa:	7035      	strb	r5, [r6, #0]
						if (ready0) {
     8ac:	7ffa      	ldrb	r2, [r7, #31]
     8ae:	1e58      	subs	r0, r3, #1
     8b0:	b2d2      	uxtb	r2, r2
     8b2:	2a00      	cmp	r2, #0
     8b4:	d1dc      	bne.n	870 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
     8b6:	700a      	strb	r2, [r1, #0]
					synchronized {
     8b8:	0003      	movs	r3, r0
     8ba:	e7f4      	b.n	8a6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
     8bc:	4668      	mov	r0, sp
     8be:	9301      	str	r3, [sp, #4]
     8c0:	f7ff febf 	bl	642 <_ZN7__GuardD1Ev>
			release();
     8c4:	0020      	movs	r0, r4
     8c6:	f7ff fef3 	bl	6b0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     8ca:	e7d6      	b.n	87a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

000008cc <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     8ce:	466b      	mov	r3, sp
     8d0:	1ddc      	adds	r4, r3, #7
     8d2:	2300      	movs	r3, #0
{
     8d4:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
     8d6:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
     8d8:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
     8da:	f001 fabd 	bl	1e58 <_Z16CDC_GetInterfacePh>
     8de:	682b      	ldr	r3, [r5, #0]
     8e0:	1818      	adds	r0, r3, r0
     8e2:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     8e4:	f001 fb5c 	bl	1fa0 <_Z12PluggableUSBv>
     8e8:	0021      	movs	r1, r4
     8ea:	f001 fb15 	bl	1f18 <_ZN13PluggableUSB_12getInterfaceEPh>
     8ee:	682b      	ldr	r3, [r5, #0]
     8f0:	1818      	adds	r0, r3, r0
     8f2:	6028      	str	r0, [r5, #0]
	return interfaces;
     8f4:	7820      	ldrb	r0, [r4, #0]
}
     8f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000008f8 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
     8f8:	2903      	cmp	r1, #3
     8fa:	d10e      	bne.n	91a <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     8fc:	2280      	movs	r2, #128	; 0x80
     8fe:	4b0e      	ldr	r3, [pc, #56]	; (938 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     900:	3162      	adds	r1, #98	; 0x62
     902:	681b      	ldr	r3, [r3, #0]
     904:	31ff      	adds	r1, #255	; 0xff
     906:	5c58      	ldrb	r0, [r3, r1]
     908:	4252      	negs	r2, r2
     90a:	4302      	orrs	r2, r0
     90c:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     90e:	2268      	movs	r2, #104	; 0x68
     910:	3963      	subs	r1, #99	; 0x63
     912:	39ff      	subs	r1, #255	; 0xff
     914:	32ff      	adds	r2, #255	; 0xff
     916:	5499      	strb	r1, [r3, r2]
}
     918:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
     91a:	2901      	cmp	r1, #1
     91c:	d1fc      	bne.n	918 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     91e:	2280      	movs	r2, #128	; 0x80
     920:	4b05      	ldr	r3, [pc, #20]	; (938 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     922:	3124      	adds	r1, #36	; 0x24
     924:	681b      	ldr	r3, [r3, #0]
     926:	31ff      	adds	r1, #255	; 0xff
     928:	5c58      	ldrb	r0, [r3, r1]
     92a:	4252      	negs	r2, r2
     92c:	4302      	orrs	r2, r0
     92e:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     930:	3923      	subs	r1, #35	; 0x23
     932:	39ff      	subs	r1, #255	; 0xff
     934:	2228      	movs	r2, #40	; 0x28
     936:	e7ed      	b.n	914 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
     938:	200005dc 	.word	0x200005dc

0000093c <_ZN14USBDeviceClass4initEv>:
{
     93c:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
     93e:	2500      	movs	r5, #0
     940:	4b2f      	ldr	r3, [pc, #188]	; (a00 <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
     942:	2101      	movs	r1, #1
{
     944:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
     946:	201a      	movs	r0, #26
	txLEDPulse = 0;
     948:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     94a:	f000 fe11 	bl	1570 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     94e:	2101      	movs	r1, #1
     950:	201a      	movs	r0, #26
     952:	f000 fe59 	bl	1608 <digitalWrite>
	rxLEDPulse = 0;
     956:	4b2b      	ldr	r3, [pc, #172]	; (a04 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
     958:	2101      	movs	r1, #1
     95a:	2019      	movs	r0, #25
	rxLEDPulse = 0;
     95c:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     95e:	f000 fe07 	bl	1570 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     962:	2101      	movs	r1, #1
     964:	2019      	movs	r0, #25
     966:	f000 fe4f 	bl	1608 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     96a:	2320      	movs	r3, #32
     96c:	4a26      	ldr	r2, [pc, #152]	; (a08 <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     96e:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     970:	69d1      	ldr	r1, [r2, #28]
     972:	430b      	orrs	r3, r1
     974:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     976:	2201      	movs	r2, #1
     978:	4924      	ldr	r1, [pc, #144]	; (a0c <_ZN14USBDeviceClass4initEv+0xd0>)
     97a:	780b      	ldrb	r3, [r1, #0]
     97c:	4313      	orrs	r3, r2
     97e:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     980:	4b23      	ldr	r3, [pc, #140]	; (a10 <_ZN14USBDeviceClass4initEv+0xd4>)
     982:	7819      	ldrb	r1, [r3, #0]
     984:	4381      	bics	r1, r0
     986:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     988:	2106      	movs	r1, #6
     98a:	781d      	ldrb	r5, [r3, #0]
     98c:	4329      	orrs	r1, r5
     98e:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     990:	4920      	ldr	r1, [pc, #128]	; (a14 <_ZN14USBDeviceClass4initEv+0xd8>)
     992:	780d      	ldrb	r5, [r1, #0]
     994:	432a      	orrs	r2, r5
     996:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     998:	781a      	ldrb	r2, [r3, #0]
     99a:	4002      	ands	r2, r0
     99c:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     99e:	2260      	movs	r2, #96	; 0x60
     9a0:	7819      	ldrb	r1, [r3, #0]
     9a2:	430a      	orrs	r2, r1
     9a4:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
     9a6:	4b1c      	ldr	r3, [pc, #112]	; (a18 <_ZN14USBDeviceClass4initEv+0xdc>)
     9a8:	4a1c      	ldr	r2, [pc, #112]	; (a1c <_ZN14USBDeviceClass4initEv+0xe0>)
     9aa:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     9ac:	785a      	ldrb	r2, [r3, #1]
     9ae:	09d2      	lsrs	r2, r2, #7
     9b0:	d1fc      	bne.n	9ac <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
     9b2:	481b      	ldr	r0, [pc, #108]	; (a20 <_ZN14USBDeviceClass4initEv+0xe4>)
     9b4:	f7ff fc46 	bl	244 <USB_SetHandler>
	usbd.reset();
     9b8:	4d1a      	ldr	r5, [pc, #104]	; (a24 <_ZN14USBDeviceClass4initEv+0xe8>)
     9ba:	0028      	movs	r0, r5
     9bc:	f7ff fdf8 	bl	5b0 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
     9c0:	0028      	movs	r0, r5
     9c2:	f7ff fe07 	bl	5d4 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     9c6:	217f      	movs	r1, #127	; 0x7f
     9c8:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     9ca:	20c1      	movs	r0, #193	; 0xc1
     9cc:	781a      	ldrb	r2, [r3, #0]
     9ce:	0080      	lsls	r0, r0, #2
     9d0:	400a      	ands	r2, r1
     9d2:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     9d4:	2204      	movs	r2, #4
     9d6:	7819      	ldrb	r1, [r3, #0]
     9d8:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     9da:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     9dc:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     9de:	891a      	ldrh	r2, [r3, #8]
     9e0:	438a      	bics	r2, r1
     9e2:	4911      	ldr	r1, [pc, #68]	; (a28 <_ZN14USBDeviceClass4initEv+0xec>)
     9e4:	811a      	strh	r2, [r3, #8]
     9e6:	580a      	ldr	r2, [r1, r0]
     9e8:	0212      	lsls	r2, r2, #8
     9ea:	0a12      	lsrs	r2, r2, #8
     9ec:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     9ee:	2280      	movs	r2, #128	; 0x80
     9f0:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     9f2:	7819      	ldrb	r1, [r3, #0]
     9f4:	3a7e      	subs	r2, #126	; 0x7e
     9f6:	430a      	orrs	r2, r1
     9f8:	701a      	strb	r2, [r3, #0]
	initialized = true;
     9fa:	2301      	movs	r3, #1
     9fc:	7023      	strb	r3, [r4, #0]
}
     9fe:	bd70      	pop	{r4, r5, r6, pc}
     a00:	20000145 	.word	0x20000145
     a04:	20000144 	.word	0x20000144
     a08:	40000400 	.word	0x40000400
     a0c:	41004458 	.word	0x41004458
     a10:	4100443c 	.word	0x4100443c
     a14:	41004459 	.word	0x41004459
     a18:	40000c00 	.word	0x40000c00
     a1c:	00004006 	.word	0x00004006
     a20:	000013fd 	.word	0x000013fd
     a24:	200005dc 	.word	0x200005dc
     a28:	e000e100 	.word	0xe000e100

00000a2c <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
     a2c:	7800      	ldrb	r0, [r0, #0]
     a2e:	2800      	cmp	r0, #0
     a30:	d010      	beq.n	a54 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     a32:	2101      	movs	r1, #1
     a34:	4b08      	ldr	r3, [pc, #32]	; (a58 <_ZN14USBDeviceClass6attachEv+0x2c>)
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	891a      	ldrh	r2, [r3, #8]
     a3a:	438a      	bics	r2, r1
     a3c:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     a3e:	2208      	movs	r2, #8
     a40:	8b19      	ldrh	r1, [r3, #24]
     a42:	430a      	orrs	r2, r1
     a44:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     a46:	2204      	movs	r2, #4
     a48:	8b19      	ldrh	r1, [r3, #24]
     a4a:	430a      	orrs	r2, r1
     a4c:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
     a4e:	2200      	movs	r2, #0
     a50:	4b02      	ldr	r3, [pc, #8]	; (a5c <_ZN14USBDeviceClass6attachEv+0x30>)
     a52:	601a      	str	r2, [r3, #0]
}
     a54:	4770      	bx	lr
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	200005dc 	.word	0x200005dc
     a5c:	200005d4 	.word	0x200005d4

00000a60 <_ZN14USBDeviceClass10setAddressEm>:
{
     a60:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     a62:	4a0f      	ldr	r2, [pc, #60]	; (aa0 <_ZN14USBDeviceClass10setAddressEm+0x40>)
     a64:	6993      	ldr	r3, [r2, #24]
     a66:	0b9b      	lsrs	r3, r3, #14
     a68:	039b      	lsls	r3, r3, #14
     a6a:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     a6c:	6813      	ldr	r3, [r2, #0]
     a6e:	2202      	movs	r2, #2
     a70:	33ff      	adds	r3, #255	; 0xff
     a72:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     a74:	7998      	ldrb	r0, [r3, #6]
     a76:	3a82      	subs	r2, #130	; 0x82
     a78:	4302      	orrs	r2, r0
     a7a:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     a7c:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
     a7e:	0792      	lsls	r2, r2, #30
     a80:	d5fc      	bpl.n	a7c <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     a82:	247f      	movs	r4, #127	; 0x7f
     a84:	4a07      	ldr	r2, [pc, #28]	; (aa4 <_ZN14USBDeviceClass10setAddressEm+0x44>)
     a86:	4021      	ands	r1, r4
     a88:	7a93      	ldrb	r3, [r2, #10]
     a8a:	0008      	movs	r0, r1
     a8c:	43a3      	bics	r3, r4
     a8e:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     a90:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     a92:	4301      	orrs	r1, r0
     a94:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     a96:	7a91      	ldrb	r1, [r2, #10]
     a98:	425b      	negs	r3, r3
     a9a:	430b      	orrs	r3, r1
     a9c:	7293      	strb	r3, [r2, #10]
}
     a9e:	bd10      	pop	{r4, pc}
     aa0:	200005dc 	.word	0x200005dc
     aa4:	41005000 	.word	0x41005000

00000aa8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
     aa8:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
     aaa:	790b      	ldrb	r3, [r1, #4]
{
     aac:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
     aae:	2b00      	cmp	r3, #0
     ab0:	d10c      	bne.n	acc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
     ab2:	0008      	movs	r0, r1
     ab4:	f001 f9de 	bl	1e74 <_Z9CDC_SetupR8USBSetup>
     ab8:	2800      	cmp	r0, #0
     aba:	d001      	beq.n	ac0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
     abc:	2001      	movs	r0, #1
}
     abe:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ac0:	4a09      	ldr	r2, [pc, #36]	; (ae8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     ac2:	6993      	ldr	r3, [r2, #24]
     ac4:	0b9b      	lsrs	r3, r3, #14
     ac6:	039b      	lsls	r3, r3, #14
     ac8:	6193      	str	r3, [r2, #24]
     aca:	e7f7      	b.n	abc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
     acc:	f001 fa68 	bl	1fa0 <_Z12PluggableUSBv>
     ad0:	0021      	movs	r1, r4
     ad2:	f001 fa54 	bl	1f7e <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     ad6:	2800      	cmp	r0, #0
     ad8:	d1f0      	bne.n	abc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
     ada:	4a03      	ldr	r2, [pc, #12]	; (ae8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     adc:	6993      	ldr	r3, [r2, #24]
     ade:	0b9b      	lsrs	r3, r3, #14
     ae0:	039b      	lsls	r3, r3, #14
     ae2:	6193      	str	r3, [r2, #24]
     ae4:	e7eb      	b.n	abe <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	200005dc 	.word	0x200005dc

00000aec <_ZN14USBDeviceClass6initEPEmm>:
{
     aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     aee:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     af0:	2a83      	cmp	r2, #131	; 0x83
     af2:	d119      	bne.n	b28 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     af4:	b2cb      	uxtb	r3, r1
     af6:	4c32      	ldr	r4, [pc, #200]	; (bc0 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
     af8:	015a      	lsls	r2, r3, #5
     afa:	18a2      	adds	r2, r4, r2
     afc:	6991      	ldr	r1, [r2, #24]
     afe:	4831      	ldr	r0, [pc, #196]	; (bc4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     b00:	01ad      	lsls	r5, r5, #6
     b02:	4008      	ands	r0, r1
     b04:	21c0      	movs	r1, #192	; 0xc0
     b06:	0589      	lsls	r1, r1, #22
     b08:	4301      	orrs	r1, r0
     b0a:	6191      	str	r1, [r2, #24]
     b0c:	492e      	ldr	r1, [pc, #184]	; (bc8 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     b0e:	6820      	ldr	r0, [r4, #0]
     b10:	194d      	adds	r5, r1, r5
     b12:	2170      	movs	r1, #112	; 0x70
     b14:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     b16:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     b18:	015b      	lsls	r3, r3, #5
     b1a:	5c1a      	ldrb	r2, [r3, r0]
     b1c:	438a      	bics	r2, r1
     b1e:	0011      	movs	r1, r2
     b20:	2240      	movs	r2, #64	; 0x40
     b22:	430a      	orrs	r2, r1
     b24:	541a      	strb	r2, [r3, r0]
}
     b26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     b28:	2a02      	cmp	r2, #2
     b2a:	d144      	bne.n	bb6 <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
     b2c:	008b      	lsls	r3, r1, #2
     b2e:	9301      	str	r3, [sp, #4]
     b30:	4b26      	ldr	r3, [pc, #152]	; (bcc <_ZN14USBDeviceClass6initEPEmm+0xe0>)
     b32:	008a      	lsls	r2, r1, #2
     b34:	58d6      	ldr	r6, [r2, r3]
     b36:	2e00      	cmp	r6, #0
     b38:	d1f5      	bne.n	b26 <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
     b3a:	2038      	movs	r0, #56	; 0x38
     b3c:	f000 fe48 	bl	17d0 <_Znwj>
		notify(false)
     b40:	4b23      	ldr	r3, [pc, #140]	; (bd0 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
     b42:	4f1f      	ldr	r7, [pc, #124]	; (bc0 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
     b44:	6003      	str	r3, [r0, #0]
     b46:	2380      	movs	r3, #128	; 0x80
     b48:	005b      	lsls	r3, r3, #1
     b4a:	60c3      	str	r3, [r0, #12]
     b4c:	1d43      	adds	r3, r0, #5
     b4e:	6206      	str	r6, [r0, #32]
     b50:	6085      	str	r5, [r0, #8]
     b52:	6106      	str	r6, [r0, #16]
     b54:	6146      	str	r6, [r0, #20]
     b56:	61c6      	str	r6, [r0, #28]
     b58:	0004      	movs	r4, r0
     b5a:	6047      	str	r7, [r0, #4]
     b5c:	77de      	strb	r6, [r3, #31]
     b5e:	62c6      	str	r6, [r0, #44]	; 0x2c
     b60:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     b62:	2080      	movs	r0, #128	; 0x80
		notify(false)
     b64:	332f      	adds	r3, #47	; 0x2f
     b66:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     b68:	0040      	lsls	r0, r0, #1
		notify(false)
     b6a:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     b6c:	f001 faf8 	bl	2160 <malloc>
     b70:	0006      	movs	r6, r0
     b72:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     b74:	2080      	movs	r0, #128	; 0x80
     b76:	0040      	lsls	r0, r0, #1
     b78:	f001 faf2 	bl	2160 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     b7c:	b2ed      	uxtb	r5, r5
     b7e:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     b80:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     b82:	18fb      	adds	r3, r7, r3
     b84:	689a      	ldr	r2, [r3, #8]
     b86:	490f      	ldr	r1, [pc, #60]	; (bc4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     b88:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     b8a:	4011      	ands	r1, r2
     b8c:	22c0      	movs	r2, #192	; 0xc0
     b8e:	0592      	lsls	r2, r2, #22
     b90:	430a      	orrs	r2, r1
     b92:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     b94:	683a      	ldr	r2, [r7, #0]
     b96:	3508      	adds	r5, #8
     b98:	016d      	lsls	r5, r5, #5
     b9a:	5ca9      	ldrb	r1, [r5, r2]
     b9c:	4381      	bics	r1, r0
     b9e:	0008      	movs	r0, r1
     ba0:	2103      	movs	r1, #3
     ba2:	4301      	orrs	r1, r0
     ba4:	54a9      	strb	r1, [r5, r2]
		release();
     ba6:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     ba8:	605e      	str	r6, [r3, #4]
		release();
     baa:	f7ff fd81 	bl	6b0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     bae:	4b07      	ldr	r3, [pc, #28]	; (bcc <_ZN14USBDeviceClass6initEPEmm+0xe0>)
     bb0:	9a01      	ldr	r2, [sp, #4]
     bb2:	50d4      	str	r4, [r2, r3]
     bb4:	e7b7      	b.n	b26 <_ZN14USBDeviceClass6initEPEmm+0x3a>
     bb6:	0011      	movs	r1, r2
     bb8:	0028      	movs	r0, r5
     bba:	f7ff fc91 	bl	4e0 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
     bbe:	e7b2      	b.n	b26 <_ZN14USBDeviceClass6initEPEmm+0x3a>
     bc0:	200005dc 	.word	0x200005dc
     bc4:	8fffffff 	.word	0x8fffffff
     bc8:	20000150 	.word	0x20000150
     bcc:	20000128 	.word	0x20000128
     bd0:	000022c8 	.word	0x000022c8

00000bd4 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
     bd4:	b570      	push	{r4, r5, r6, lr}
     bd6:	0005      	movs	r5, r0
     bd8:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     bda:	4b06      	ldr	r3, [pc, #24]	; (bf4 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     bdc:	00a2      	lsls	r2, r4, #2
     bde:	58d2      	ldr	r2, [r2, r3]
     be0:	2a00      	cmp	r2, #0
     be2:	d005      	beq.n	bf0 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
     be4:	0021      	movs	r1, r4
     be6:	0028      	movs	r0, r5
     be8:	f7ff ff80 	bl	aec <_ZN14USBDeviceClass6initEPEmm>
     bec:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     bee:	e7f4      	b.n	bda <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
     bf0:	bd70      	pop	{r4, r5, r6, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	20000004 	.word	0x20000004

00000bf8 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     bf8:	4b08      	ldr	r3, [pc, #32]	; (c1c <_ZN14USBDeviceClass9availableEm+0x24>)
     bfa:	008a      	lsls	r2, r1, #2
     bfc:	58d0      	ldr	r0, [r2, r3]
{
     bfe:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     c00:	2800      	cmp	r0, #0
     c02:	d003      	beq.n	c0c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     c04:	6803      	ldr	r3, [r0, #0]
     c06:	689b      	ldr	r3, [r3, #8]
     c08:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     c0a:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     c0c:	b2c9      	uxtb	r1, r1
     c0e:	4b04      	ldr	r3, [pc, #16]	; (c20 <_ZN14USBDeviceClass9availableEm+0x28>)
     c10:	0149      	lsls	r1, r1, #5
     c12:	1859      	adds	r1, r3, r1
     c14:	6888      	ldr	r0, [r1, #8]
     c16:	0480      	lsls	r0, r0, #18
     c18:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
     c1a:	e7f6      	b.n	c0a <_ZN14USBDeviceClass9availableEm+0x12>
     c1c:	20000128 	.word	0x20000128
     c20:	200005dc 	.word	0x200005dc

00000c24 <_ZN14USBDeviceClass5flushEm>:
{
     c24:	b510      	push	{r4, lr}
     c26:	000c      	movs	r4, r1
	if (available(ep)) {
     c28:	f7ff ffe6 	bl	bf8 <_ZN14USBDeviceClass9availableEm>
     c2c:	2800      	cmp	r0, #0
     c2e:	d00c      	beq.n	c4a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     c30:	4b06      	ldr	r3, [pc, #24]	; (c4c <_ZN14USBDeviceClass5flushEm+0x28>)
     c32:	b2e4      	uxtb	r4, r4
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	3408      	adds	r4, #8
     c38:	0164      	lsls	r4, r4, #5
     c3a:	191c      	adds	r4, r3, r4
     c3c:	2380      	movs	r3, #128	; 0x80
     c3e:	7962      	ldrb	r2, [r4, #5]
     c40:	425b      	negs	r3, r3
     c42:	4313      	orrs	r3, r2
     c44:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     c46:	2302      	movs	r3, #2
     c48:	71e3      	strb	r3, [r4, #7]
}
     c4a:	bd10      	pop	{r4, pc}
     c4c:	200005dc 	.word	0x200005dc

00000c50 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     c50:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     c52:	4b13      	ldr	r3, [pc, #76]	; (ca0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     c54:	b2cc      	uxtb	r4, r1
     c56:	4a13      	ldr	r2, [pc, #76]	; (ca4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
     c58:	0160      	lsls	r0, r4, #5
     c5a:	0189      	lsls	r1, r1, #6
     c5c:	1859      	adds	r1, r3, r1
     c5e:	1813      	adds	r3, r2, r0
     c60:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c62:	6899      	ldr	r1, [r3, #8]
     c64:	4d10      	ldr	r5, [pc, #64]	; (ca8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c66:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c68:	400d      	ands	r5, r1
     c6a:	2180      	movs	r1, #128	; 0x80
     c6c:	0289      	lsls	r1, r1, #10
     c6e:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c70:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c72:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     c74:	6899      	ldr	r1, [r3, #8]
     c76:	0b89      	lsrs	r1, r1, #14
     c78:	0389      	lsls	r1, r1, #14
     c7a:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c7c:	6811      	ldr	r1, [r2, #0]
     c7e:	0163      	lsls	r3, r4, #5
     c80:	18cb      	adds	r3, r1, r3
     c82:	791e      	ldrb	r6, [r3, #4]
     c84:	4335      	orrs	r5, r6
     c86:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     c88:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     c8a:	066d      	lsls	r5, r5, #25
     c8c:	d5fc      	bpl.n	c88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     c8e:	0164      	lsls	r4, r4, #5
     c90:	1909      	adds	r1, r1, r4
     c92:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     c94:	07db      	lsls	r3, r3, #31
     c96:	d5fc      	bpl.n	c92 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     c98:	1812      	adds	r2, r2, r0
     c9a:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
     c9c:	b2c0      	uxtb	r0, r0
}
     c9e:	bd70      	pop	{r4, r5, r6, pc}
     ca0:	20000310 	.word	0x20000310
     ca4:	200005dc 	.word	0x200005dc
     ca8:	f0003fff 	.word	0xf0003fff

00000cac <_ZN14USBDeviceClass11recvControlEPvm>:
{
     cac:	b570      	push	{r4, r5, r6, lr}
     cae:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     cb0:	2240      	movs	r2, #64	; 0x40
     cb2:	4b0b      	ldr	r3, [pc, #44]	; (ce0 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
     cb4:	000d      	movs	r5, r1
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	33ff      	adds	r3, #255	; 0xff
     cba:	7959      	ldrb	r1, [r3, #5]
     cbc:	430a      	orrs	r2, r1
     cbe:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
     cc0:	2100      	movs	r1, #0
     cc2:	f7ff ffc5 	bl	c50 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     cc6:	42a0      	cmp	r0, r4
     cc8:	d900      	bls.n	ccc <_ZN14USBDeviceClass11recvControlEPvm+0x20>
     cca:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
     ccc:	2300      	movs	r3, #0
		data[i] = buffer[i];
     cce:	4905      	ldr	r1, [pc, #20]	; (ce4 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
     cd0:	42a3      	cmp	r3, r4
     cd2:	d003      	beq.n	cdc <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
     cd4:	5c5a      	ldrb	r2, [r3, r1]
     cd6:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
     cd8:	3301      	adds	r3, #1
     cda:	e7f9      	b.n	cd0 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
     cdc:	bd70      	pop	{r4, r5, r6, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	200005dc 	.word	0x200005dc
     ce4:	20000310 	.word	0x20000310

00000ce8 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     ce8:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     cea:	b2c9      	uxtb	r1, r1
     cec:	480b      	ldr	r0, [pc, #44]	; (d1c <_ZN14USBDeviceClass7armRecvEm+0x34>)
     cee:	0149      	lsls	r1, r1, #5
     cf0:	1842      	adds	r2, r0, r1
     cf2:	6893      	ldr	r3, [r2, #8]
     cf4:	049b      	lsls	r3, r3, #18
     cf6:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
     cf8:	2b3f      	cmp	r3, #63	; 0x3f
     cfa:	dd0b      	ble.n	d14 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     cfc:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
     cfe:	3b40      	subs	r3, #64	; 0x40
     d00:	049b      	lsls	r3, r3, #18
     d02:	0ba4      	lsrs	r4, r4, #14
     d04:	0c9b      	lsrs	r3, r3, #18
     d06:	03a4      	lsls	r4, r4, #14
     d08:	4323      	orrs	r3, r4
     d0a:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     d0c:	1841      	adds	r1, r0, r1
     d0e:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
     d10:	b2c0      	uxtb	r0, r0
}
     d12:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     d14:	6893      	ldr	r3, [r2, #8]
     d16:	0b9b      	lsrs	r3, r3, #14
     d18:	039b      	lsls	r3, r3, #14
     d1a:	e7f6      	b.n	d0a <_ZN14USBDeviceClass7armRecvEm+0x22>
     d1c:	200005dc 	.word	0x200005dc

00000d20 <_ZN14USBDeviceClass4recvEmPvm>:
{
     d20:	b5f0      	push	{r4, r5, r6, r7, lr}
     d22:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     d24:	4b30      	ldr	r3, [pc, #192]	; (de8 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
     d26:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     d28:	681b      	ldr	r3, [r3, #0]
{
     d2a:	0006      	movs	r6, r0
     d2c:	000d      	movs	r5, r1
     d2e:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     d30:	2b00      	cmp	r3, #0
     d32:	d055      	beq.n	de0 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
     d34:	4f2d      	ldr	r7, [pc, #180]	; (dec <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     d36:	7839      	ldrb	r1, [r7, #0]
     d38:	b2c9      	uxtb	r1, r1
     d3a:	2900      	cmp	r1, #0
     d3c:	d102      	bne.n	d44 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     d3e:	2019      	movs	r0, #25
     d40:	f000 fc62 	bl	1608 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
     d44:	2364      	movs	r3, #100	; 0x64
     d46:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
     d48:	4b29      	ldr	r3, [pc, #164]	; (df0 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     d4a:	00aa      	lsls	r2, r5, #2
     d4c:	58d0      	ldr	r0, [r2, r3]
     d4e:	2800      	cmp	r0, #0
     d50:	d008      	beq.n	d64 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
     d52:	6803      	ldr	r3, [r0, #0]
     d54:	0022      	movs	r2, r4
     d56:	685b      	ldr	r3, [r3, #4]
     d58:	9901      	ldr	r1, [sp, #4]
     d5a:	4798      	blx	r3
     d5c:	0004      	movs	r4, r0
}
     d5e:	0020      	movs	r0, r4
     d60:	b005      	add	sp, #20
     d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
     d64:	0029      	movs	r1, r5
     d66:	0030      	movs	r0, r6
     d68:	f7ff ff46 	bl	bf8 <_ZN14USBDeviceClass9availableEm>
     d6c:	4284      	cmp	r4, r0
     d6e:	d904      	bls.n	d7a <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
     d70:	0029      	movs	r1, r5
     d72:	0030      	movs	r0, r6
     d74:	f7ff ff40 	bl	bf8 <_ZN14USBDeviceClass9availableEm>
     d78:	0004      	movs	r4, r0
	armRecv(ep);
     d7a:	0029      	movs	r1, r5
     d7c:	0030      	movs	r0, r6
     d7e:	f7ff ffb3 	bl	ce8 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     d82:	2101      	movs	r1, #1
     d84:	b2eb      	uxtb	r3, r5
     d86:	4f1b      	ldr	r7, [pc, #108]	; (df4 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     d88:	9303      	str	r3, [sp, #12]
     d8a:	015b      	lsls	r3, r3, #5
     d8c:	9302      	str	r3, [sp, #8]
     d8e:	9a02      	ldr	r2, [sp, #8]
     d90:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     d92:	9801      	ldr	r0, [sp, #4]
     d94:	189b      	adds	r3, r3, r2
     d96:	33ff      	adds	r3, #255	; 0xff
     d98:	7a5a      	ldrb	r2, [r3, #9]
     d9a:	430a      	orrs	r2, r1
     d9c:	4916      	ldr	r1, [pc, #88]	; (df8 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     d9e:	725a      	strb	r2, [r3, #9]
     da0:	01ab      	lsls	r3, r5, #6
     da2:	18c9      	adds	r1, r1, r3
     da4:	0022      	movs	r2, r4
     da6:	f001 f9e5 	bl	2174 <memcpy>
	if (len && !available(ep)) {
     daa:	2c00      	cmp	r4, #0
     dac:	d0d7      	beq.n	d5e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     dae:	0029      	movs	r1, r5
     db0:	0030      	movs	r0, r6
     db2:	f7ff ff21 	bl	bf8 <_ZN14USBDeviceClass9availableEm>
     db6:	2800      	cmp	r0, #0
     db8:	d1d1      	bne.n	d5e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     dba:	2140      	movs	r1, #64	; 0x40
     dbc:	9b03      	ldr	r3, [sp, #12]
     dbe:	683a      	ldr	r2, [r7, #0]
     dc0:	3308      	adds	r3, #8
     dc2:	015b      	lsls	r3, r3, #5
     dc4:	18d3      	adds	r3, r2, r3
     dc6:	7918      	ldrb	r0, [r3, #4]
     dc8:	4301      	orrs	r1, r0
     dca:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     dcc:	2101      	movs	r1, #1
     dce:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     dd0:	2101      	movs	r1, #1
     dd2:	9b02      	ldr	r3, [sp, #8]
     dd4:	18d3      	adds	r3, r2, r3
     dd6:	33ff      	adds	r3, #255	; 0xff
     dd8:	7a9a      	ldrb	r2, [r3, #10]
     dda:	430a      	orrs	r2, r1
     ddc:	729a      	strb	r2, [r3, #10]
     dde:	e7be      	b.n	d5e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
     de0:	2401      	movs	r4, #1
     de2:	4264      	negs	r4, r4
     de4:	e7bb      	b.n	d5e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	200005d4 	.word	0x200005d4
     dec:	20000144 	.word	0x20000144
     df0:	20000128 	.word	0x20000128
     df4:	200005dc 	.word	0x200005dc
     df8:	20000310 	.word	0x20000310

00000dfc <_ZN14USBDeviceClass4recvEm>:
{
     dfc:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
     dfe:	466b      	mov	r3, sp
     e00:	1ddc      	adds	r4, r3, #7
     e02:	0022      	movs	r2, r4
     e04:	2301      	movs	r3, #1
     e06:	f7ff ff8b 	bl	d20 <_ZN14USBDeviceClass4recvEmPvm>
     e0a:	2801      	cmp	r0, #1
     e0c:	d101      	bne.n	e12 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
     e0e:	7820      	ldrb	r0, [r4, #0]
}
     e10:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
     e12:	2001      	movs	r0, #1
     e14:	4240      	negs	r0, r0
     e16:	e7fb      	b.n	e10 <_ZN14USBDeviceClass4recvEm+0x14>

00000e18 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     e18:	b5f0      	push	{r4, r5, r6, r7, lr}
     e1a:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     e1c:	4b3a      	ldr	r3, [pc, #232]	; (f08 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
     e1e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     e20:	681b      	ldr	r3, [r3, #0]
{
     e22:	000f      	movs	r7, r1
     e24:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     e26:	2b00      	cmp	r3, #0
     e28:	d03f      	beq.n	eaa <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
     e2a:	2380      	movs	r3, #128	; 0x80
     e2c:	01db      	lsls	r3, r3, #7
     e2e:	429e      	cmp	r6, r3
     e30:	d83b      	bhi.n	eaa <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     e32:	4c36      	ldr	r4, [pc, #216]	; (f0c <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
     e34:	7821      	ldrb	r1, [r4, #0]
     e36:	b2c9      	uxtb	r1, r1
     e38:	2900      	cmp	r1, #0
     e3a:	d102      	bne.n	e42 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     e3c:	201a      	movs	r0, #26
     e3e:	f000 fbe3 	bl	1608 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
     e42:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
     e44:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     e46:	4a32      	ldr	r2, [pc, #200]	; (f10 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
     e48:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     e4a:	01bb      	lsls	r3, r7, #6
     e4c:	18d3      	adds	r3, r2, r3
     e4e:	9302      	str	r3, [sp, #8]
	while (len != 0)
     e50:	2e00      	cmp	r6, #0
     e52:	d02c      	beq.n	eae <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
     e54:	4b2f      	ldr	r3, [pc, #188]	; (f14 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	9303      	str	r3, [sp, #12]
     e5a:	23ff      	movs	r3, #255	; 0xff
     e5c:	403b      	ands	r3, r7
     e5e:	001c      	movs	r4, r3
     e60:	9300      	str	r3, [sp, #0]
     e62:	3408      	adds	r4, #8
     e64:	9b03      	ldr	r3, [sp, #12]
     e66:	0164      	lsls	r4, r4, #5
     e68:	191c      	adds	r4, r3, r4
     e6a:	79a3      	ldrb	r3, [r4, #6]
     e6c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
     e6e:	d021      	beq.n	eb4 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
     e70:	4b29      	ldr	r3, [pc, #164]	; (f18 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
     e72:	492a      	ldr	r1, [pc, #168]	; (f1c <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
     e74:	6818      	ldr	r0, [r3, #0]
     e76:	f001 f8c3 	bl	2000 <__udivsi3>
     e7a:	4b29      	ldr	r3, [pc, #164]	; (f20 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
     e7c:	2117      	movs	r1, #23
     e7e:	4358      	muls	r0, r3
     e80:	f001 f8be 	bl	2000 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     e84:	4b27      	ldr	r3, [pc, #156]	; (f24 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     e86:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
     e88:	0792      	lsls	r2, r2, #30
     e8a:	d413      	bmi.n	eb4 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     e8c:	5dda      	ldrb	r2, [r3, r7]
     e8e:	2a00      	cmp	r2, #0
     e90:	d101      	bne.n	e96 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
     e92:	3801      	subs	r0, #1
     e94:	d2f7      	bcs.n	e86 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
     e96:	2201      	movs	r2, #1
     e98:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     e9a:	9b00      	ldr	r3, [sp, #0]
     e9c:	015a      	lsls	r2, r3, #5
     e9e:	4b1d      	ldr	r3, [pc, #116]	; (f14 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
     ea0:	189b      	adds	r3, r3, r2
     ea2:	699a      	ldr	r2, [r3, #24]
     ea4:	0b92      	lsrs	r2, r2, #14
     ea6:	0392      	lsls	r2, r2, #14
     ea8:	619a      	str	r2, [r3, #24]
					return -1;
     eaa:	2501      	movs	r5, #1
     eac:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
     eae:	0028      	movs	r0, r5
     eb0:	b005      	add	sp, #20
     eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
     eb4:	2200      	movs	r2, #0
     eb6:	4b1b      	ldr	r3, [pc, #108]	; (f24 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
     eb8:	0034      	movs	r4, r6
     eba:	55da      	strb	r2, [r3, r7]
     ebc:	2e3f      	cmp	r6, #63	; 0x3f
     ebe:	d900      	bls.n	ec2 <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
     ec0:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     ec2:	0022      	movs	r2, r4
     ec4:	9901      	ldr	r1, [sp, #4]
     ec6:	9802      	ldr	r0, [sp, #8]
     ec8:	f001 f954 	bl	2174 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     ecc:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ece:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     ed0:	015a      	lsls	r2, r3, #5
     ed2:	4b10      	ldr	r3, [pc, #64]	; (f14 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ed4:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     ed6:	189b      	adds	r3, r3, r2
     ed8:	9a02      	ldr	r2, [sp, #8]
		written += length;
     eda:	192d      	adds	r5, r5, r4
     edc:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ede:	699a      	ldr	r2, [r3, #24]
		len -= length;
     ee0:	1b36      	subs	r6, r6, r4
     ee2:	0b92      	lsrs	r2, r2, #14
     ee4:	0392      	lsls	r2, r2, #14
     ee6:	430a      	orrs	r2, r1
     ee8:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     eea:	9b00      	ldr	r3, [sp, #0]
     eec:	9a03      	ldr	r2, [sp, #12]
     eee:	3308      	adds	r3, #8
     ef0:	015b      	lsls	r3, r3, #5
     ef2:	18d3      	adds	r3, r2, r3
     ef4:	2202      	movs	r2, #2
     ef6:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     ef8:	7959      	ldrb	r1, [r3, #5]
     efa:	3a82      	subs	r2, #130	; 0x82
     efc:	430a      	orrs	r2, r1
     efe:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
     f00:	9b01      	ldr	r3, [sp, #4]
     f02:	191b      	adds	r3, r3, r4
     f04:	9301      	str	r3, [sp, #4]
	while (len != 0)
     f06:	e7a3      	b.n	e50 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
     f08:	200005d4 	.word	0x200005d4
     f0c:	20000145 	.word	0x20000145
     f10:	20000150 	.word	0x20000150
     f14:	200005dc 	.word	0x200005dc
     f18:	2000002c 	.word	0x2000002c
     f1c:	000f4240 	.word	0x000f4240
     f20:	00011170 	.word	0x00011170
     f24:	20000147 	.word	0x20000147

00000f28 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
     f28:	b570      	push	{r4, r5, r6, lr}
     f2a:	000d      	movs	r5, r1
     f2c:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
     f2e:	4e0d      	ldr	r6, [pc, #52]	; (f64 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
     f30:	01ab      	lsls	r3, r5, #6
     f32:	18f6      	adds	r6, r6, r3
{
     f34:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
     f36:	0030      	movs	r0, r6
     f38:	0022      	movs	r2, r4
     f3a:	f001 f91b 	bl	2174 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     f3e:	b2ed      	uxtb	r5, r5
     f40:	4909      	ldr	r1, [pc, #36]	; (f68 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
     f42:	016d      	lsls	r5, r5, #5
     f44:	194d      	adds	r5, r1, r5
     f46:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     f48:	69ab      	ldr	r3, [r5, #24]
     f4a:	4a08      	ldr	r2, [pc, #32]	; (f6c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
     f4c:	0020      	movs	r0, r4
     f4e:	4013      	ands	r3, r2
     f50:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     f52:	69ab      	ldr	r3, [r5, #24]
     f54:	04a2      	lsls	r2, r4, #18
     f56:	0b9b      	lsrs	r3, r3, #14
     f58:	0c92      	lsrs	r2, r2, #18
     f5a:	039b      	lsls	r3, r3, #14
     f5c:	4313      	orrs	r3, r2
     f5e:	61ab      	str	r3, [r5, #24]
     f60:	bd70      	pop	{r4, r5, r6, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	20000150 	.word	0x20000150
     f68:	200005dc 	.word	0x200005dc
     f6c:	f0003fff 	.word	0xf0003fff

00000f70 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
     f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
     f72:	4b10      	ldr	r3, [pc, #64]	; (fb4 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
     f74:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
     f76:	781b      	ldrb	r3, [r3, #0]
{
     f78:	000f      	movs	r7, r1
     f7a:	0015      	movs	r5, r2
	if (_dry_run == true)
     f7c:	2b00      	cmp	r3, #0
     f7e:	d10c      	bne.n	f9a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
     f80:	4b0d      	ldr	r3, [pc, #52]	; (fb8 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
     f82:	0016      	movs	r6, r2
     f84:	781c      	ldrb	r4, [r3, #0]
     f86:	2c00      	cmp	r4, #0
     f88:	d009      	beq.n	f9e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
     f8a:	4e0c      	ldr	r6, [pc, #48]	; (fbc <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
     f8c:	480c      	ldr	r0, [pc, #48]	; (fc0 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
     f8e:	8834      	ldrh	r4, [r6, #0]
     f90:	1900      	adds	r0, r0, r4
		_pack_size += len;
     f92:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
     f94:	f001 f8ee 	bl	2174 <memcpy>
		_pack_size += len;
     f98:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
     f9a:	0028      	movs	r0, r5
     f9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
     f9e:	2e00      	cmp	r6, #0
     fa0:	d0fb      	beq.n	f9a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
     fa2:	193a      	adds	r2, r7, r4
     fa4:	0033      	movs	r3, r6
     fa6:	2100      	movs	r1, #0
     fa8:	9801      	ldr	r0, [sp, #4]
     faa:	f7ff ffbd 	bl	f28 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
     fae:	1824      	adds	r4, r4, r0
		len -= sent;
     fb0:	1a36      	subs	r6, r6, r0
 	while (len > 0)
     fb2:	e7f4      	b.n	f9e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
     fb4:	200004d0 	.word	0x200004d0
     fb8:	200005d1 	.word	0x200005d1
     fbc:	200005d2 	.word	0x200005d2
     fc0:	200004d1 	.word	0x200004d1

00000fc4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
     fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
     fc6:	2000      	movs	r0, #0
{
     fc8:	af00      	add	r7, sp, #0
     fca:	000e      	movs	r6, r1
     fcc:	0015      	movs	r5, r2
	if (maxlen < 2)
     fce:	2a01      	cmp	r2, #1
     fd0:	dd26      	ble.n	1020 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
     fd2:	1dd3      	adds	r3, r2, #7
     fd4:	466a      	mov	r2, sp
     fd6:	08db      	lsrs	r3, r3, #3
     fd8:	00db      	lsls	r3, r3, #3
     fda:	1ad3      	subs	r3, r2, r3
     fdc:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
     fde:	0008      	movs	r0, r1
     fe0:	f001 f94a 	bl	2278 <strlen>
	uint8_t buffer[maxlen];
     fe4:	466c      	mov	r4, sp
	buffer[1] = 0x03;
     fe6:	2303      	movs	r3, #3
		buffer[i] = 0;
     fe8:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
     fea:	3001      	adds	r0, #1
     fec:	0040      	lsls	r0, r0, #1
     fee:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
     ff0:	7063      	strb	r3, [r4, #1]
     ff2:	1e5a      	subs	r2, r3, #1
     ff4:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
     ff6:	4295      	cmp	r5, r2
     ff8:	dd0b      	ble.n	1012 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
     ffa:	7830      	ldrb	r0, [r6, #0]
     ffc:	2800      	cmp	r0, #0
     ffe:	d008      	beq.n	1012 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    1000:	3601      	adds	r6, #1
    1002:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    1004:	429d      	cmp	r5, r3
    1006:	d003      	beq.n	1010 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    1008:	54e1      	strb	r1, [r4, r3]
    100a:	3302      	adds	r3, #2
    100c:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    100e:	e7f0      	b.n	ff2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    1010:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    1012:	0021      	movs	r1, r4
    1014:	4803      	ldr	r0, [pc, #12]	; (1024 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    1016:	f7ff ffab 	bl	f70 <_ZN14USBDeviceClass11sendControlEPKvm>
    101a:	1e43      	subs	r3, r0, #1
    101c:	4198      	sbcs	r0, r3
    101e:	b2c0      	uxtb	r0, r0
}
    1020:	46bd      	mov	sp, r7
    1022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1024:	20000124 	.word	0x20000124

00001028 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1028:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    102a:	2700      	movs	r7, #0
	_dry_run = true;
    102c:	2601      	movs	r6, #1
{
    102e:	b087      	sub	sp, #28
	_dry_run = true;
    1030:	4b1e      	ldr	r3, [pc, #120]	; (10ac <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1032:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1034:	a902      	add	r1, sp, #8
	_dry_run = true;
    1036:	701e      	strb	r6, [r3, #0]
{
    1038:	0005      	movs	r5, r0
	uint32_t total = 0;
    103a:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    103c:	f7ff fc46 	bl	8cc <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1040:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1042:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1044:	2209      	movs	r2, #9
    1046:	0039      	movs	r1, r7
    1048:	0020      	movs	r0, r4
    104a:	f001 f89c 	bl	2186 <memset>
    104e:	2309      	movs	r3, #9
    1050:	7023      	strb	r3, [r4, #0]
    1052:	2302      	movs	r3, #2
    1054:	7063      	strb	r3, [r4, #1]
    1056:	339e      	adds	r3, #158	; 0x9e
    1058:	71e3      	strb	r3, [r4, #7]
    105a:	335a      	adds	r3, #90	; 0x5a
    105c:	7223      	strb	r3, [r4, #8]
    105e:	9b02      	ldr	r3, [sp, #8]
    1060:	7166      	strb	r6, [r4, #5]
    1062:	3309      	adds	r3, #9
    1064:	8063      	strh	r3, [r4, #2]
    1066:	466b      	mov	r3, sp
    1068:	791b      	ldrb	r3, [r3, #4]
    106a:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    106c:	4b0f      	ldr	r3, [pc, #60]	; (10ac <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    106e:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1070:	9b00      	ldr	r3, [sp, #0]
    1072:	2b09      	cmp	r3, #9
    1074:	d107      	bne.n	1086 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1076:	001a      	movs	r2, r3
    1078:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    107a:	0028      	movs	r0, r5
    107c:	f7ff ff78 	bl	f70 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1080:	2001      	movs	r0, #1
    1082:	b007      	add	sp, #28
    1084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1086:	4b0a      	ldr	r3, [pc, #40]	; (10b0 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1088:	2209      	movs	r2, #9
		_pack_message = true;
    108a:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    108c:	4e09      	ldr	r6, [pc, #36]	; (10b4 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    108e:	0021      	movs	r1, r4
    1090:	0028      	movs	r0, r5
	total = 0;
    1092:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1094:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1096:	f7ff ff6b 	bl	f70 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    109a:	a902      	add	r1, sp, #8
    109c:	0028      	movs	r0, r5
    109e:	f7ff fc15 	bl	8cc <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    10a2:	4b03      	ldr	r3, [pc, #12]	; (10b0 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    10a4:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    10a6:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    10a8:	4903      	ldr	r1, [pc, #12]	; (10b8 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    10aa:	e7e6      	b.n	107a <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    10ac:	200004d0 	.word	0x200004d0
    10b0:	200005d1 	.word	0x200005d1
    10b4:	200005d2 	.word	0x200005d2
    10b8:	200004d1 	.word	0x200004d1

000010bc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    10bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    10be:	78ce      	ldrb	r6, [r1, #3]
{
    10c0:	b092      	sub	sp, #72	; 0x48
    10c2:	0005      	movs	r5, r0
    10c4:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    10c6:	2e02      	cmp	r6, #2
    10c8:	d108      	bne.n	10dc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    10ca:	88c9      	ldrh	r1, [r1, #6]
    10cc:	482b      	ldr	r0, [pc, #172]	; (117c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    10ce:	f7ff ffab 	bl	1028 <_ZN14USBDeviceClass17sendConfigurationEm>
    10d2:	1e43      	subs	r3, r0, #1
    10d4:	4198      	sbcs	r0, r3
    10d6:	b2c0      	uxtb	r0, r0
}
    10d8:	b012      	add	sp, #72	; 0x48
    10da:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    10dc:	f000 ff60 	bl	1fa0 <_Z12PluggableUSBv>
    10e0:	0021      	movs	r1, r4
    10e2:	f000 ff2d 	bl	1f40 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    10e6:	2800      	cmp	r0, #0
    10e8:	d003      	beq.n	10f2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    10ea:	17c3      	asrs	r3, r0, #31
    10ec:	1a18      	subs	r0, r3, r0
    10ee:	0fc0      	lsrs	r0, r0, #31
    10f0:	e7f2      	b.n	10d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    10f2:	2e01      	cmp	r6, #1
    10f4:	d10b      	bne.n	110e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    10f6:	88e2      	ldrh	r2, [r4, #6]
    10f8:	4921      	ldr	r1, [pc, #132]	; (1180 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    10fa:	2a11      	cmp	r2, #17
    10fc:	dc10      	bgt.n	1120 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    10fe:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1100:	2a00      	cmp	r2, #0
    1102:	d00d      	beq.n	1120 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    1104:	0028      	movs	r0, r5
    1106:	f7ff ff33 	bl	f70 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    110a:	2001      	movs	r0, #1
    110c:	e7e4      	b.n	10d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    110e:	2e03      	cmp	r6, #3
    1110:	d1e2      	bne.n	10d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    1112:	78a3      	ldrb	r3, [r4, #2]
    1114:	2b00      	cmp	r3, #0
    1116:	d105      	bne.n	1124 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    1118:	88e2      	ldrh	r2, [r4, #6]
    111a:	491a      	ldr	r1, [pc, #104]	; (1184 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    111c:	2a03      	cmp	r2, #3
    111e:	ddee      	ble.n	10fe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    1120:	780a      	ldrb	r2, [r1, #0]
    1122:	e7ef      	b.n	1104 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    1124:	2b02      	cmp	r3, #2
    1126:	d105      	bne.n	1134 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1128:	79a2      	ldrb	r2, [r4, #6]
    112a:	4917      	ldr	r1, [pc, #92]	; (1188 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    112c:	0028      	movs	r0, r5
    112e:	f7ff ff49 	bl	fc4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    1132:	e7d1      	b.n	10d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    1134:	2b01      	cmp	r3, #1
    1136:	d102      	bne.n	113e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1138:	79a2      	ldrb	r2, [r4, #6]
    113a:	4914      	ldr	r1, [pc, #80]	; (118c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    113c:	e7f6      	b.n	112c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    113e:	2b03      	cmp	r3, #3
    1140:	d1ca      	bne.n	10d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    1142:	4b13      	ldr	r3, [pc, #76]	; (1190 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1144:	a901      	add	r1, sp, #4
    1146:	6818      	ldr	r0, [r3, #0]
    1148:	f7ff f9b8 	bl	4bc <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    114c:	4b11      	ldr	r3, [pc, #68]	; (1194 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    114e:	a903      	add	r1, sp, #12
    1150:	6818      	ldr	r0, [r3, #0]
    1152:	f7ff f9b3 	bl	4bc <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    1156:	4b10      	ldr	r3, [pc, #64]	; (1198 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1158:	a905      	add	r1, sp, #20
    115a:	6818      	ldr	r0, [r3, #0]
    115c:	f7ff f9ae 	bl	4bc <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    1160:	4b0e      	ldr	r3, [pc, #56]	; (119c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    1162:	a907      	add	r1, sp, #28
    1164:	6818      	ldr	r0, [r3, #0]
    1166:	f7ff f9a9 	bl	4bc <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    116a:	f000 ff19 	bl	1fa0 <_Z12PluggableUSBv>
    116e:	a909      	add	r1, sp, #36	; 0x24
    1170:	f000 fef6 	bl	1f60 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1174:	79a2      	ldrb	r2, [r4, #6]
    1176:	a901      	add	r1, sp, #4
    1178:	e7d8      	b.n	112c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	20000124 	.word	0x20000124
    1180:	000022f2 	.word	0x000022f2
    1184:	000022e2 	.word	0x000022e2
    1188:	000022d4 	.word	0x000022d4
    118c:	000022e6 	.word	0x000022e6
    1190:	0080a00c 	.word	0x0080a00c
    1194:	0080a040 	.word	0x0080a040
    1198:	0080a044 	.word	0x0080a044
    119c:	0080a048 	.word	0x0080a048

000011a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    11a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    11a2:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    11a4:	7848      	ldrb	r0, [r1, #1]
{
    11a6:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    11a8:	280b      	cmp	r0, #11
    11aa:	d811      	bhi.n	11d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    11ac:	f000 ff1e 	bl	1fec <__gnu_thumb1_case_uqi>
    11b0:	2e101d06 	.word	0x2e101d06
    11b4:	70484310 	.word	0x70484310
    11b8:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    11bc:	7809      	ldrb	r1, [r1, #0]
    11be:	aa01      	add	r2, sp, #4
    11c0:	2900      	cmp	r1, #0
    11c2:	d107      	bne.n	11d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    11c4:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    11c6:	7011      	strb	r1, [r2, #0]
    11c8:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    11ca:	0030      	movs	r0, r6
    11cc:	f7ff feac 	bl	f28 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    11d0:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    11d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    11d4:	2300      	movs	r3, #0
    11d6:	7013      	strb	r3, [r2, #0]
    11d8:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    11da:	4b2e      	ldr	r3, [pc, #184]	; (1294 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b01      	cmp	r3, #1
    11e0:	d100      	bne.n	11e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    11e2:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    11e4:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    11e6:	2100      	movs	r1, #0
    11e8:	e7ef      	b.n	11ca <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    11ea:	788a      	ldrb	r2, [r1, #2]
    11ec:	2300      	movs	r3, #0
    11ee:	2a01      	cmp	r2, #1
    11f0:	d104      	bne.n	11fc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    11f2:	aa01      	add	r2, sp, #4
    11f4:	7013      	strb	r3, [r2, #0]
    11f6:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    11f8:	4b27      	ldr	r3, [pc, #156]	; (1298 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    11fa:	e7ef      	b.n	11dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    11fc:	4a25      	ldr	r2, [pc, #148]	; (1294 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    11fe:	7013      	strb	r3, [r2, #0]
    1200:	4a26      	ldr	r2, [pc, #152]	; (129c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1202:	6993      	ldr	r3, [r2, #24]
    1204:	0b9b      	lsrs	r3, r3, #14
    1206:	039b      	lsls	r3, r3, #14
    1208:	6193      	str	r3, [r2, #24]
    120a:	e7e1      	b.n	11d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    120c:	788c      	ldrb	r4, [r1, #2]
    120e:	2c01      	cmp	r4, #1
    1210:	d106      	bne.n	1220 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1212:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1214:	4b20      	ldr	r3, [pc, #128]	; (1298 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    1216:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1218:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    121a:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    121c:	0023      	movs	r3, r4
    121e:	e7d4      	b.n	11ca <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    1220:	2c00      	cmp	r4, #0
    1222:	d108      	bne.n	1236 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    1224:	2001      	movs	r0, #1
    1226:	4b1b      	ldr	r3, [pc, #108]	; (1294 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1228:	4a1c      	ldr	r2, [pc, #112]	; (129c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    122a:	7018      	strb	r0, [r3, #0]
    122c:	6993      	ldr	r3, [r2, #24]
    122e:	0b9b      	lsrs	r3, r3, #14
    1230:	039b      	lsls	r3, r3, #14
    1232:	6193      	str	r3, [r2, #24]
			return true;
    1234:	e7cd      	b.n	11d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1236:	78a9      	ldrb	r1, [r5, #2]
    1238:	0030      	movs	r0, r6
    123a:	f7ff fc11 	bl	a60 <_ZN14USBDeviceClass10setAddressEm>
    123e:	e7c7      	b.n	11d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1240:	0030      	movs	r0, r6
    1242:	f7ff ff3b 	bl	10bc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1246:	e7c4      	b.n	11d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1248:	2301      	movs	r3, #1
    124a:	4a15      	ldr	r2, [pc, #84]	; (12a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    124c:	e7cb      	b.n	11e6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    124e:	780b      	ldrb	r3, [r1, #0]
			return false;
    1250:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1252:	06db      	lsls	r3, r3, #27
    1254:	d1bd      	bne.n	11d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1256:	0030      	movs	r0, r6
    1258:	f7ff fcbc 	bl	bd4 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    125c:	202a      	movs	r0, #42	; 0x2a
    125e:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    1260:	78aa      	ldrb	r2, [r5, #2]
    1262:	4b0f      	ldr	r3, [pc, #60]	; (12a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1264:	30ff      	adds	r0, #255	; 0xff
    1266:	601a      	str	r2, [r3, #0]
    1268:	4a0c      	ldr	r2, [pc, #48]	; (129c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    126a:	6813      	ldr	r3, [r2, #0]
    126c:	5c1c      	ldrb	r4, [r3, r0]
    126e:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1270:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1272:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1274:	34ff      	adds	r4, #255	; 0xff
    1276:	5d19      	ldrb	r1, [r3, r4]
    1278:	3829      	subs	r0, #41	; 0x29
    127a:	38ff      	subs	r0, #255	; 0xff
    127c:	4301      	orrs	r1, r0
    127e:	5519      	strb	r1, [r3, r4]
    1280:	e7d4      	b.n	122c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    1282:	2301      	movs	r3, #1
    1284:	4a07      	ldr	r2, [pc, #28]	; (12a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1286:	e7ae      	b.n	11e6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1288:	788a      	ldrb	r2, [r1, #2]
    128a:	4b06      	ldr	r3, [pc, #24]	; (12a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    128c:	601a      	str	r2, [r3, #0]
    128e:	e7b7      	b.n	1200 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1290:	2000      	movs	r0, #0
    1292:	e79e      	b.n	11d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1294:	20000146 	.word	0x20000146
    1298:	2000014e 	.word	0x2000014e
    129c:	200005dc 	.word	0x200005dc
    12a0:	200005d4 	.word	0x200005d4
    12a4:	200005d8 	.word	0x200005d8

000012a8 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    12a8:	4b4c      	ldr	r3, [pc, #304]	; (13dc <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    12aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    12ac:	781c      	ldrb	r4, [r3, #0]
{
    12ae:	0007      	movs	r7, r0
	if (_pack_message == true) {
    12b0:	2c00      	cmp	r4, #0
    12b2:	d000      	beq.n	12b6 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    12b4:	e07d      	b.n	13b2 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    12b6:	4e4a      	ldr	r6, [pc, #296]	; (13e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    12b8:	6833      	ldr	r3, [r6, #0]
    12ba:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    12bc:	071b      	lsls	r3, r3, #28
    12be:	d50e      	bpl.n	12de <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    12c0:	0021      	movs	r1, r4
    12c2:	0020      	movs	r0, r4
    12c4:	f7ff f90c 	bl	4e0 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    12c8:	6832      	ldr	r2, [r6, #0]
    12ca:	2310      	movs	r3, #16
    12cc:	0011      	movs	r1, r2
    12ce:	31ff      	adds	r1, #255	; 0xff
    12d0:	7a88      	ldrb	r0, [r1, #10]
    12d2:	4303      	orrs	r3, r0
    12d4:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    12d6:	4b43      	ldr	r3, [pc, #268]	; (13e4 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    12d8:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    12da:	2308      	movs	r3, #8
    12dc:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    12de:	6833      	ldr	r3, [r6, #0]
    12e0:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    12e2:	0752      	lsls	r2, r2, #29
    12e4:	d51f      	bpl.n	1326 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    12e6:	2204      	movs	r2, #4
    12e8:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    12ea:	4a3f      	ldr	r2, [pc, #252]	; (13e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    12ec:	7813      	ldrb	r3, [r2, #0]
    12ee:	2b00      	cmp	r3, #0
    12f0:	d00a      	beq.n	1308 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    12f2:	7813      	ldrb	r3, [r2, #0]
    12f4:	3b01      	subs	r3, #1
    12f6:	b2db      	uxtb	r3, r3
    12f8:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    12fa:	7813      	ldrb	r3, [r2, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d103      	bne.n	1308 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    1300:	2101      	movs	r1, #1
    1302:	201a      	movs	r0, #26
    1304:	f000 f980 	bl	1608 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1308:	4a38      	ldr	r2, [pc, #224]	; (13ec <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    130a:	7813      	ldrb	r3, [r2, #0]
    130c:	2b00      	cmp	r3, #0
    130e:	d00a      	beq.n	1326 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    1310:	7813      	ldrb	r3, [r2, #0]
    1312:	3b01      	subs	r3, #1
    1314:	b2db      	uxtb	r3, r3
    1316:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1318:	7813      	ldrb	r3, [r2, #0]
    131a:	2b00      	cmp	r3, #0
    131c:	d103      	bne.n	1326 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    131e:	2101      	movs	r1, #1
    1320:	2019      	movs	r0, #25
    1322:	f000 f971 	bl	1608 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1326:	6833      	ldr	r3, [r6, #0]
    1328:	33ff      	adds	r3, #255	; 0xff
    132a:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    132c:	06d2      	lsls	r2, r2, #27
    132e:	d520      	bpl.n	1372 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1330:	2210      	movs	r2, #16
    1332:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1334:	7959      	ldrb	r1, [r3, #5]
    1336:	3230      	adds	r2, #48	; 0x30
    1338:	430a      	orrs	r2, r1
    133a:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    133c:	2360      	movs	r3, #96	; 0x60
    133e:	492c      	ldr	r1, [pc, #176]	; (13f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    1340:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1342:	780a      	ldrb	r2, [r1, #0]
    1344:	421a      	tst	r2, r3
    1346:	d135      	bne.n	13b4 <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    1348:	f7ff ff2a 	bl	11a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    134c:	2800      	cmp	r0, #0
    134e:	d034      	beq.n	13ba <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1350:	2280      	movs	r2, #128	; 0x80
    1352:	6833      	ldr	r3, [r6, #0]
    1354:	4252      	negs	r2, r2
    1356:	33ff      	adds	r3, #255	; 0xff
    1358:	7999      	ldrb	r1, [r3, #6]
    135a:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    135c:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    135e:	6833      	ldr	r3, [r6, #0]
    1360:	33ff      	adds	r3, #255	; 0xff
    1362:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1364:	0652      	lsls	r2, r2, #25
    1366:	d504      	bpl.n	1372 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1368:	2240      	movs	r2, #64	; 0x40
    136a:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    136c:	7a59      	ldrb	r1, [r3, #9]
    136e:	430a      	orrs	r2, r1
    1370:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1372:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    1374:	2500      	movs	r5, #0
    1376:	8c1c      	ldrh	r4, [r3, #32]
    1378:	2301      	movs	r3, #1
    137a:	439c      	bics	r4, r3
    137c:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    137e:	9301      	str	r3, [sp, #4]
    1380:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    1382:	2c00      	cmp	r4, #0
    1384:	d015      	beq.n	13b2 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
		if ((ept_int & (1 << i)) != 0)
    1386:	0023      	movs	r3, r4
    1388:	412b      	asrs	r3, r5
    138a:	9a01      	ldr	r2, [sp, #4]
    138c:	4213      	tst	r3, r2
    138e:	d00d      	beq.n	13ac <_ZN14USBDeviceClass10ISRHandlerEv+0x104>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1390:	002b      	movs	r3, r5
    1392:	6832      	ldr	r2, [r6, #0]
    1394:	3308      	adds	r3, #8
    1396:	015b      	lsls	r3, r3, #5
    1398:	18d3      	adds	r3, r2, r3
    139a:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    139c:	07d2      	lsls	r2, r2, #31
    139e:	d413      	bmi.n	13c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    13a0:	79db      	ldrb	r3, [r3, #7]
    13a2:	079b      	lsls	r3, r3, #30
    13a4:	d410      	bmi.n	13c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    13a6:	9b01      	ldr	r3, [sp, #4]
    13a8:	40ab      	lsls	r3, r5
    13aa:	439c      	bics	r4, r3
    13ac:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    13ae:	2d09      	cmp	r5, #9
    13b0:	d1e6      	bne.n	1380 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			break;  // fire exit
	}
}
    13b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    13b4:	f7ff fb78 	bl	aa8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    13b8:	e7c8      	b.n	134c <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    13ba:	2220      	movs	r2, #32
    13bc:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    13be:	e7cd      	b.n	135c <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
					epHandlers[i]->handleEndpoint();
    13c0:	6803      	ldr	r3, [r0, #0]
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	4798      	blx	r3
    13c6:	e7ee      	b.n	13a6 <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
				if (epHandlers[i]) {
    13c8:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    13ca:	00aa      	lsls	r2, r5, #2
    13cc:	58d0      	ldr	r0, [r2, r3]
    13ce:	2800      	cmp	r0, #0
    13d0:	d1f6      	bne.n	13c0 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
					handleEndpoint(i);
    13d2:	0038      	movs	r0, r7
    13d4:	f7ff fa90 	bl	8f8 <_ZN14USBDeviceClass14handleEndpointEh>
    13d8:	e7e5      	b.n	13a6 <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	200005d1 	.word	0x200005d1
    13e0:	200005dc 	.word	0x200005dc
    13e4:	200005d4 	.word	0x200005d4
    13e8:	20000145 	.word	0x20000145
    13ec:	20000144 	.word	0x20000144
    13f0:	20000310 	.word	0x20000310
    13f4:	410050ff 	.word	0x410050ff
    13f8:	20000128 	.word	0x20000128

000013fc <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    13fc:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    13fe:	4802      	ldr	r0, [pc, #8]	; (1408 <UDD_Handler+0xc>)
    1400:	f7ff ff52 	bl	12a8 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1404:	bd10      	pop	{r4, pc}
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	20000124 	.word	0x20000124

0000140c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    140c:	4a01      	ldr	r2, [pc, #4]	; (1414 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    140e:	4b02      	ldr	r3, [pc, #8]	; (1418 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1410:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1412:	4770      	bx	lr
    1414:	41005000 	.word	0x41005000
    1418:	200005dc 	.word	0x200005dc

0000141c <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    141c:	21fa      	movs	r1, #250	; 0xfa
    141e:	4b31      	ldr	r3, [pc, #196]	; (14e4 <init+0xc8>)
{
    1420:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1422:	6818      	ldr	r0, [r3, #0]
    1424:	0089      	lsls	r1, r1, #2
    1426:	f000 fdeb 	bl	2000 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    142a:	4b2f      	ldr	r3, [pc, #188]	; (14e8 <init+0xcc>)
    142c:	3801      	subs	r0, #1
    142e:	4298      	cmp	r0, r3
    1430:	d856      	bhi.n	14e0 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1432:	492e      	ldr	r1, [pc, #184]	; (14ec <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1434:	4a2e      	ldr	r2, [pc, #184]	; (14f0 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1436:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1438:	20c0      	movs	r0, #192	; 0xc0
    143a:	6a13      	ldr	r3, [r2, #32]
    143c:	0600      	lsls	r0, r0, #24
    143e:	021b      	lsls	r3, r3, #8
    1440:	0a1b      	lsrs	r3, r3, #8
    1442:	4303      	orrs	r3, r0
    1444:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1446:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1448:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    144a:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    144c:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    144e:	2180      	movs	r1, #128	; 0x80
    1450:	6a13      	ldr	r3, [r2, #32]
    1452:	0609      	lsls	r1, r1, #24
    1454:	021b      	lsls	r3, r3, #8
    1456:	0a1b      	lsrs	r3, r3, #8
    1458:	430b      	orrs	r3, r1
    145a:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    145c:	22fc      	movs	r2, #252	; 0xfc
    145e:	4b25      	ldr	r3, [pc, #148]	; (14f4 <init+0xd8>)
    1460:	6a19      	ldr	r1, [r3, #32]
    1462:	430a      	orrs	r2, r1
    1464:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1466:	22fc      	movs	r2, #252	; 0xfc
    1468:	6a19      	ldr	r1, [r3, #32]
    146a:	0192      	lsls	r2, r2, #6
    146c:	430a      	orrs	r2, r1
    146e:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1470:	22a0      	movs	r2, #160	; 0xa0
    1472:	6a19      	ldr	r1, [r3, #32]
    1474:	02d2      	lsls	r2, r2, #11
    1476:	430a      	orrs	r2, r1
    1478:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    147a:	0020      	movs	r0, r4
    147c:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    147e:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1480:	f000 f876 	bl	1570 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1484:	2c14      	cmp	r4, #20
    1486:	d1f8      	bne.n	147a <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1488:	4b1b      	ldr	r3, [pc, #108]	; (14f8 <init+0xdc>)
    148a:	001c      	movs	r4, r3
    148c:	785a      	ldrb	r2, [r3, #1]
    148e:	b252      	sxtb	r2, r2
    1490:	2a00      	cmp	r2, #0
    1492:	dbfb      	blt.n	148c <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1494:	4a19      	ldr	r2, [pc, #100]	; (14fc <init+0xe0>)
    1496:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1498:	4b19      	ldr	r3, [pc, #100]	; (1500 <init+0xe4>)
    149a:	001a      	movs	r2, r3
    149c:	7e59      	ldrb	r1, [r3, #25]
    149e:	09c9      	lsrs	r1, r1, #7
    14a0:	2901      	cmp	r1, #1
    14a2:	d0fb      	beq.n	149c <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    14a4:	21e4      	movs	r1, #228	; 0xe4
    14a6:	00c9      	lsls	r1, r1, #3
    14a8:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    14aa:	213f      	movs	r1, #63	; 0x3f
    14ac:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    14ae:	7e53      	ldrb	r3, [r2, #25]
    14b0:	09db      	lsrs	r3, r3, #7
    14b2:	2b01      	cmp	r3, #1
    14b4:	d0fb      	beq.n	14ae <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    14b6:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    14b8:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    14ba:	015b      	lsls	r3, r3, #5
    14bc:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    14be:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    14c0:	f000 f824 	bl	150c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    14c4:	7863      	ldrb	r3, [r4, #1]
    14c6:	b25b      	sxtb	r3, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	dbfb      	blt.n	14c4 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    14cc:	4b0d      	ldr	r3, [pc, #52]	; (1504 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    14ce:	4a0e      	ldr	r2, [pc, #56]	; (1508 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    14d0:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    14d2:	79d3      	ldrb	r3, [r2, #7]
    14d4:	09db      	lsrs	r3, r3, #7
    14d6:	2b01      	cmp	r3, #1
    14d8:	d0fb      	beq.n	14d2 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    14da:	2341      	movs	r3, #65	; 0x41
    14dc:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    14de:	bd10      	pop	{r4, pc}
    14e0:	e7fe      	b.n	14e0 <init+0xc4>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	2000002c 	.word	0x2000002c
    14e8:	00ffffff 	.word	0x00ffffff
    14ec:	e000e010 	.word	0xe000e010
    14f0:	e000ed00 	.word	0xe000ed00
    14f4:	40000400 	.word	0x40000400
    14f8:	40000c00 	.word	0x40000c00
    14fc:	0000401e 	.word	0x0000401e
    1500:	42004000 	.word	0x42004000
    1504:	00004021 	.word	0x00004021
    1508:	42004800 	.word	0x42004800

0000150c <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    150c:	4a16      	ldr	r2, [pc, #88]	; (1568 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    150e:	b500      	push	{lr}
    1510:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1512:	7e51      	ldrb	r1, [r2, #25]
    1514:	09c9      	lsrs	r1, r1, #7
    1516:	2901      	cmp	r1, #1
    1518:	d0fb      	beq.n	1512 <analogReference+0x6>
  syncADC();
  switch (mode)
    151a:	3801      	subs	r0, #1
    151c:	2804      	cmp	r0, #4
    151e:	d816      	bhi.n	154e <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1520:	6919      	ldr	r1, [r3, #16]
    1522:	4a12      	ldr	r2, [pc, #72]	; (156c <analogReference+0x60>)
    1524:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1526:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1528:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    152a:	785a      	ldrb	r2, [r3, #1]
    152c:	438a      	bics	r2, r1
  switch (mode)
    152e:	f000 fd5d 	bl	1fec <__gnu_thumb1_case_uqi>
    1532:	0803      	.short	0x0803
    1534:	0b06      	.short	0x0b06
    1536:	03          	.byte	0x03
    1537:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1538:	0011      	movs	r1, r2
    153a:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    153c:	430a      	orrs	r2, r1
    153e:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1540:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1542:	0011      	movs	r1, r2
    1544:	2203      	movs	r2, #3
    1546:	e7f9      	b.n	153c <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1548:	0011      	movs	r1, r2
    154a:	2202      	movs	r2, #2
    154c:	e7f6      	b.n	153c <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    154e:	23f0      	movs	r3, #240	; 0xf0
    1550:	6911      	ldr	r1, [r2, #16]
    1552:	051b      	lsls	r3, r3, #20
    1554:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1556:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1558:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    155a:	7853      	ldrb	r3, [r2, #1]
    155c:	438b      	bics	r3, r1
    155e:	0019      	movs	r1, r3
    1560:	2302      	movs	r3, #2
    1562:	430b      	orrs	r3, r1
    1564:	7053      	strb	r3, [r2, #1]
}
    1566:	e7eb      	b.n	1540 <analogReference+0x34>
    1568:	42004000 	.word	0x42004000
    156c:	f0ffffff 	.word	0xf0ffffff

00001570 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1570:	2318      	movs	r3, #24
{
    1572:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1574:	001d      	movs	r5, r3
{
    1576:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1578:	4345      	muls	r5, r0
    157a:	2008      	movs	r0, #8
    157c:	4a20      	ldr	r2, [pc, #128]	; (1600 <pinMode+0x90>)
    157e:	1955      	adds	r5, r2, r5
    1580:	5628      	ldrsb	r0, [r5, r0]
    1582:	3001      	adds	r0, #1
    1584:	d014      	beq.n	15b0 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1586:	2903      	cmp	r1, #3
    1588:	d812      	bhi.n	15b0 <pinMode+0x40>
    158a:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    158c:	4363      	muls	r3, r4
    158e:	56d1      	ldrsb	r1, [r2, r3]
    1590:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1592:	f000 fd2b 	bl	1fec <__gnu_thumb1_case_uqi>
    1596:	2802      	.short	0x2802
    1598:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    159a:	6858      	ldr	r0, [r3, #4]
    159c:	01cb      	lsls	r3, r1, #7
    159e:	2102      	movs	r1, #2
    15a0:	4a18      	ldr	r2, [pc, #96]	; (1604 <pinMode+0x94>)
    15a2:	189b      	adds	r3, r3, r2
    15a4:	181a      	adds	r2, r3, r0
    15a6:	3240      	adds	r2, #64	; 0x40
    15a8:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    15aa:	2201      	movs	r2, #1
    15ac:	4082      	lsls	r2, r0
    15ae:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    15b0:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    15b2:	6858      	ldr	r0, [r3, #4]
    15b4:	01cb      	lsls	r3, r1, #7
    15b6:	2106      	movs	r1, #6
    15b8:	4a12      	ldr	r2, [pc, #72]	; (1604 <pinMode+0x94>)
    15ba:	189b      	adds	r3, r3, r2
    15bc:	181a      	adds	r2, r3, r0
    15be:	3240      	adds	r2, #64	; 0x40
    15c0:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    15c2:	2201      	movs	r2, #1
    15c4:	4082      	lsls	r2, r0
    15c6:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    15c8:	619a      	str	r2, [r3, #24]
    break ;
    15ca:	e7f1      	b.n	15b0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    15cc:	6858      	ldr	r0, [r3, #4]
    15ce:	01cb      	lsls	r3, r1, #7
    15d0:	2106      	movs	r1, #6
    15d2:	4a0c      	ldr	r2, [pc, #48]	; (1604 <pinMode+0x94>)
    15d4:	189b      	adds	r3, r3, r2
    15d6:	181a      	adds	r2, r3, r0
    15d8:	3240      	adds	r2, #64	; 0x40
    15da:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    15dc:	2201      	movs	r2, #1
    15de:	4082      	lsls	r2, r0
    15e0:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    15e2:	615a      	str	r2, [r3, #20]
    break ;
    15e4:	e7e4      	b.n	15b0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    15e6:	6858      	ldr	r0, [r3, #4]
    15e8:	01cb      	lsls	r3, r1, #7
    15ea:	2102      	movs	r1, #2
    15ec:	4a05      	ldr	r2, [pc, #20]	; (1604 <pinMode+0x94>)
    15ee:	189b      	adds	r3, r3, r2
    15f0:	181a      	adds	r2, r3, r0
    15f2:	3240      	adds	r2, #64	; 0x40
    15f4:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    15f6:	2201      	movs	r2, #1
    15f8:	4082      	lsls	r2, r0
    15fa:	609a      	str	r2, [r3, #8]
    break ;
    15fc:	e7d8      	b.n	15b0 <pinMode+0x40>
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	00002304 	.word	0x00002304
    1604:	41004400 	.word	0x41004400

00001608 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1608:	2318      	movs	r3, #24
{
    160a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    160c:	2408      	movs	r4, #8
    160e:	4358      	muls	r0, r3
    1610:	4a11      	ldr	r2, [pc, #68]	; (1658 <digitalWrite+0x50>)
    1612:	1813      	adds	r3, r2, r0
    1614:	571c      	ldrsb	r4, [r3, r4]
    1616:	3401      	adds	r4, #1
    1618:	d01b      	beq.n	1652 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    161a:	2601      	movs	r6, #1
    161c:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    161e:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1620:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1622:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1624:	4a0d      	ldr	r2, [pc, #52]	; (165c <digitalWrite+0x54>)
    1626:	01db      	lsls	r3, r3, #7
    1628:	189a      	adds	r2, r3, r2
    162a:	6890      	ldr	r0, [r2, #8]
    162c:	4228      	tst	r0, r5
    162e:	d10b      	bne.n	1648 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1630:	000c      	movs	r4, r1
    1632:	1e60      	subs	r0, r4, #1
    1634:	4184      	sbcs	r4, r0
    1636:	19d2      	adds	r2, r2, r7
    1638:	3240      	adds	r2, #64	; 0x40
    163a:	7810      	ldrb	r0, [r2, #0]
    163c:	4034      	ands	r4, r6
    163e:	3603      	adds	r6, #3
    1640:	00a4      	lsls	r4, r4, #2
    1642:	43b0      	bics	r0, r6
    1644:	4320      	orrs	r0, r4
    1646:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1648:	4a04      	ldr	r2, [pc, #16]	; (165c <digitalWrite+0x54>)
    164a:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    164c:	2900      	cmp	r1, #0
    164e:	d101      	bne.n	1654 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    1650:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    1652:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    1654:	619d      	str	r5, [r3, #24]
    break ;
    1656:	e7fc      	b.n	1652 <digitalWrite+0x4a>
    1658:	00002304 	.word	0x00002304
    165c:	41004400 	.word	0x41004400

00001660 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1662:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1664:	2018      	movs	r0, #24
    1666:	4358      	muls	r0, r3
    1668:	4a2a      	ldr	r2, [pc, #168]	; (1714 <pinPeripheral+0xb4>)
    166a:	1810      	adds	r0, r2, r0
    166c:	7a00      	ldrb	r0, [r0, #8]
    166e:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1670:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1672:	3001      	adds	r0, #1
    1674:	d013      	beq.n	169e <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    1676:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1678:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    167a:	280c      	cmp	r0, #12
    167c:	d80f      	bhi.n	169e <pinPeripheral+0x3e>
    167e:	f000 fcb5 	bl	1fec <__gnu_thumb1_case_uqi>
    1682:	1c45      	.short	0x1c45
    1684:	1c1c1c1c 	.word	0x1c1c1c1c
    1688:	071c1c1c 	.word	0x071c1c1c
    168c:	0707      	.short	0x0707
    168e:	07          	.byte	0x07
    168f:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1690:	2909      	cmp	r1, #9
    1692:	d106      	bne.n	16a2 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    1694:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    1696:	0018      	movs	r0, r3
    1698:	f7ff ff6a 	bl	1570 <pinMode>
  return 0l ;
    169c:	2400      	movs	r4, #0
}
    169e:	0020      	movs	r0, r4
    16a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    16a2:	290a      	cmp	r1, #10
    16a4:	d101      	bne.n	16aa <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    16a6:	3908      	subs	r1, #8
    16a8:	e7f5      	b.n	1696 <pinPeripheral+0x36>
  return 0l ;
    16aa:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    16ac:	290b      	cmp	r1, #11
    16ae:	d1f6      	bne.n	169e <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    16b0:	390a      	subs	r1, #10
    16b2:	0018      	movs	r0, r3
    16b4:	f7ff ff5c 	bl	1570 <pinMode>
    16b8:	e7f1      	b.n	169e <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    16ba:	2018      	movs	r0, #24
    16bc:	4343      	muls	r3, r0
    16be:	18d0      	adds	r0, r2, r3
    16c0:	6846      	ldr	r6, [r0, #4]
    16c2:	2501      	movs	r5, #1
    16c4:	0034      	movs	r4, r6
    16c6:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    16c8:	4813      	ldr	r0, [pc, #76]	; (1718 <pinPeripheral+0xb8>)
    16ca:	01d2      	lsls	r2, r2, #7
    16cc:	1812      	adds	r2, r2, r0
    16ce:	0873      	lsrs	r3, r6, #1
    16d0:	18d3      	adds	r3, r2, r3
    16d2:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    16d4:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    16d6:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    16d8:	2c00      	cmp	r4, #0
    16da:	d00b      	beq.n	16f4 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    16dc:	240f      	movs	r4, #15
    16de:	0109      	lsls	r1, r1, #4
    16e0:	4020      	ands	r0, r4
    16e2:	4301      	orrs	r1, r0
    16e4:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    16e6:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    16e8:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    16ea:	3240      	adds	r2, #64	; 0x40
    16ec:	7813      	ldrb	r3, [r2, #0]
    16ee:	431d      	orrs	r5, r3
    16f0:	7015      	strb	r5, [r2, #0]
    16f2:	e7d3      	b.n	169c <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    16f4:	270f      	movs	r7, #15
    16f6:	43b8      	bics	r0, r7
    16f8:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    16fa:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    16fc:	b2c9      	uxtb	r1, r1
    16fe:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1700:	0013      	movs	r3, r2
    1702:	3340      	adds	r3, #64	; 0x40
    1704:	781a      	ldrb	r2, [r3, #0]
    1706:	4315      	orrs	r5, r2
    1708:	701d      	strb	r5, [r3, #0]
    170a:	e7c8      	b.n	169e <pinPeripheral+0x3e>
      return -1l ;
    170c:	2401      	movs	r4, #1
    170e:	4264      	negs	r4, r4
    1710:	e7c5      	b.n	169e <pinPeripheral+0x3e>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00002304 	.word	0x00002304
    1718:	41004400 	.word	0x41004400

0000171c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    171c:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    171e:	4802      	ldr	r0, [pc, #8]	; (1728 <SERCOM0_Handler+0xc>)
    1720:	f000 fa7c 	bl	1c1c <_ZN4Uart10IrqHandlerEv>
}
    1724:	bd10      	pop	{r4, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	2000079c 	.word	0x2000079c

0000172c <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    172c:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    172e:	4802      	ldr	r0, [pc, #8]	; (1738 <SERCOM5_Handler+0xc>)
    1730:	f000 fa74 	bl	1c1c <_ZN4Uart10IrqHandlerEv>
}
    1734:	bd10      	pop	{r4, pc}
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	200006e0 	.word	0x200006e0

0000173c <_GLOBAL__sub_I_g_APinDescription>:
    173c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    173e:	2401      	movs	r4, #1
    1740:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    1742:	4f15      	ldr	r7, [pc, #84]	; (1798 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    1744:	4915      	ldr	r1, [pc, #84]	; (179c <_GLOBAL__sub_I_g_APinDescription+0x60>)
    1746:	0038      	movs	r0, r7
    1748:	f000 f846 	bl	17d8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    174c:	4914      	ldr	r1, [pc, #80]	; (17a0 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    174e:	4815      	ldr	r0, [pc, #84]	; (17a4 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    1750:	f000 f842 	bl	17d8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    1754:	4914      	ldr	r1, [pc, #80]	; (17a8 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    1756:	4815      	ldr	r0, [pc, #84]	; (17ac <_GLOBAL__sub_I_g_APinDescription+0x70>)
    1758:	f000 f83e 	bl	17d8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    175c:	4914      	ldr	r1, [pc, #80]	; (17b0 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    175e:	4815      	ldr	r0, [pc, #84]	; (17b4 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    1760:	f000 f83a 	bl	17d8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    1764:	4914      	ldr	r1, [pc, #80]	; (17b8 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    1766:	4815      	ldr	r0, [pc, #84]	; (17bc <_GLOBAL__sub_I_g_APinDescription+0x80>)
    1768:	f000 f836 	bl	17d8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    176c:	4d14      	ldr	r5, [pc, #80]	; (17c0 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    176e:	4915      	ldr	r1, [pc, #84]	; (17c4 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    1770:	0028      	movs	r0, r5
    1772:	f000 f831 	bl	17d8 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1776:	0039      	movs	r1, r7
    1778:	9600      	str	r6, [sp, #0]
    177a:	0023      	movs	r3, r4
    177c:	9401      	str	r4, [sp, #4]
    177e:	2200      	movs	r2, #0
    1780:	4811      	ldr	r0, [pc, #68]	; (17c8 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    1782:	f000 f9f3 	bl	1b6c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    1786:	9600      	str	r6, [sp, #0]
    1788:	0029      	movs	r1, r5
    178a:	9401      	str	r4, [sp, #4]
    178c:	231e      	movs	r3, #30
    178e:	221f      	movs	r2, #31
    1790:	480e      	ldr	r0, [pc, #56]	; (17cc <_GLOBAL__sub_I_g_APinDescription+0x90>)
    1792:	f000 f9eb 	bl	1b6c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    1796:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1798:	20000858 	.word	0x20000858
    179c:	42000800 	.word	0x42000800
    17a0:	42000c00 	.word	0x42000c00
    17a4:	2000085c 	.word	0x2000085c
    17a8:	42001000 	.word	0x42001000
    17ac:	20000860 	.word	0x20000860
    17b0:	42001400 	.word	0x42001400
    17b4:	20000864 	.word	0x20000864
    17b8:	42001800 	.word	0x42001800
    17bc:	20000868 	.word	0x20000868
    17c0:	2000086c 	.word	0x2000086c
    17c4:	42001c00 	.word	0x42001c00
    17c8:	2000079c 	.word	0x2000079c
    17cc:	200006e0 	.word	0x200006e0

000017d0 <_Znwj>:
    17d0:	b510      	push	{r4, lr}
    17d2:	f000 fcc5 	bl	2160 <malloc>
    17d6:	bd10      	pop	{r4, pc}

000017d8 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    17d8:	6001      	str	r1, [r0, #0]
}
    17da:	4770      	bx	lr

000017dc <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    17dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17de:	ac05      	add	r4, sp, #20
    17e0:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    17e2:	6804      	ldr	r4, [r0, #0]
    17e4:	1e98      	subs	r0, r3, #2
    17e6:	1e47      	subs	r7, r0, #1
    17e8:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    17ea:	6826      	ldr	r6, [r4, #0]
    17ec:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    17ee:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    17f0:	4332      	orrs	r2, r6
    17f2:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    17f4:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    17f6:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    17f8:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    17fa:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    17fc:	6862      	ldr	r2, [r4, #4]
    17fe:	4329      	orrs	r1, r5
    1800:	2000      	movs	r0, #0
    1802:	2b02      	cmp	r3, #2
    1804:	d000      	beq.n	1808 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    1806:	0358      	lsls	r0, r3, #13
    1808:	4311      	orrs	r1, r2
    180a:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    180c:	6061      	str	r1, [r4, #4]
}
    180e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001810 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    1810:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1812:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1814:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1816:	03a4      	lsls	r4, r4, #14
    1818:	6818      	ldr	r0, [r3, #0]
    181a:	0512      	lsls	r2, r2, #20
    181c:	4022      	ands	r2, r4
    181e:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1820:	20c0      	movs	r0, #192	; 0xc0
    1822:	0409      	lsls	r1, r1, #16
    1824:	0280      	lsls	r0, r0, #10
    1826:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1828:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    182a:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    182c:	685a      	ldr	r2, [r3, #4]
    182e:	4310      	orrs	r0, r2
    1830:	6058      	str	r0, [r3, #4]
}
    1832:	bd10      	pop	{r4, pc}

00001834 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    1834:	2201      	movs	r2, #1
    1836:	6803      	ldr	r3, [r0, #0]
    1838:	6819      	ldr	r1, [r3, #0]
    183a:	430a      	orrs	r2, r1
    183c:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    183e:	681a      	ldr	r2, [r3, #0]
    1840:	07d2      	lsls	r2, r2, #31
    1842:	d4fc      	bmi.n	183e <_ZN6SERCOM9resetUARTEv+0xa>
    1844:	69da      	ldr	r2, [r3, #28]
    1846:	07d2      	lsls	r2, r2, #31
    1848:	d4f9      	bmi.n	183e <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    184a:	4770      	bx	lr

0000184c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    184c:	2202      	movs	r2, #2
    184e:	6803      	ldr	r3, [r0, #0]
    1850:	6819      	ldr	r1, [r3, #0]
    1852:	430a      	orrs	r2, r1
    1854:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    1856:	69da      	ldr	r2, [r3, #28]
    1858:	0792      	lsls	r2, r2, #30
    185a:	d4fc      	bmi.n	1856 <_ZN6SERCOM10enableUARTEv+0xa>
}
    185c:	4770      	bx	lr

0000185e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    185e:	6803      	ldr	r3, [r0, #0]
    1860:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    1862:	07d2      	lsls	r2, r2, #31
    1864:	d402      	bmi.n	186c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    1866:	7e1a      	ldrb	r2, [r3, #24]
    1868:	0792      	lsls	r2, r2, #30
    186a:	d5fc      	bpl.n	1866 <_ZN6SERCOM9flushUARTEv+0x8>
}
    186c:	4770      	bx	lr

0000186e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    186e:	2200      	movs	r2, #0
    1870:	6803      	ldr	r3, [r0, #0]
    1872:	835a      	strh	r2, [r3, #26]
}
    1874:	4770      	bx	lr

00001876 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    1876:	6803      	ldr	r3, [r0, #0]
    1878:	7e18      	ldrb	r0, [r3, #24]
    187a:	0740      	lsls	r0, r0, #29
    187c:	0fc0      	lsrs	r0, r0, #31
}
    187e:	4770      	bx	lr

00001880 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    1880:	6803      	ldr	r3, [r0, #0]
    1882:	7e18      	ldrb	r0, [r3, #24]
    1884:	09c0      	lsrs	r0, r0, #7
}
    1886:	4770      	bx	lr

00001888 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    1888:	2380      	movs	r3, #128	; 0x80
    188a:	6802      	ldr	r2, [r0, #0]
    188c:	425b      	negs	r3, r3
    188e:	7e11      	ldrb	r1, [r2, #24]
    1890:	430b      	orrs	r3, r1
    1892:	7613      	strb	r3, [r2, #24]
}
    1894:	4770      	bx	lr

00001896 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    1896:	6803      	ldr	r3, [r0, #0]
    1898:	7e18      	ldrb	r0, [r3, #24]
    189a:	07c0      	lsls	r0, r0, #31
    189c:	0fc0      	lsrs	r0, r0, #31
}
    189e:	4770      	bx	lr

000018a0 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    18a0:	6803      	ldr	r3, [r0, #0]
    18a2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    18a4:	b2c0      	uxtb	r0, r0
}
    18a6:	4770      	bx	lr

000018a8 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    18a8:	6803      	ldr	r3, [r0, #0]
    18aa:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    18ac:	07d2      	lsls	r2, r2, #31
    18ae:	d5fc      	bpl.n	18aa <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    18b0:	b289      	uxth	r1, r1
  return 1;
}
    18b2:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    18b4:	8519      	strh	r1, [r3, #40]	; 0x28
}
    18b6:	4770      	bx	lr

000018b8 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    18b8:	2201      	movs	r2, #1
    18ba:	6803      	ldr	r3, [r0, #0]
    18bc:	759a      	strb	r2, [r3, #22]
}
    18be:	4770      	bx	lr

000018c0 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    18c0:	2201      	movs	r2, #1
    18c2:	6803      	ldr	r3, [r0, #0]
    18c4:	751a      	strb	r2, [r3, #20]
}
    18c6:	4770      	bx	lr

000018c8 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    18c8:	6803      	ldr	r3, [r0, #0]
    18ca:	4a21      	ldr	r2, [pc, #132]	; (1950 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    18cc:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    18ce:	4293      	cmp	r3, r2
    18d0:	d011      	beq.n	18f6 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    18d2:	4a20      	ldr	r2, [pc, #128]	; (1954 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    18d4:	4293      	cmp	r3, r2
    18d6:	d02f      	beq.n	1938 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    18d8:	4a1f      	ldr	r2, [pc, #124]	; (1958 <_ZN6SERCOM13initClockNVICEv+0x90>)
    18da:	4293      	cmp	r3, r2
    18dc:	d02f      	beq.n	193e <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    18de:	4a1f      	ldr	r2, [pc, #124]	; (195c <_ZN6SERCOM13initClockNVICEv+0x94>)
    18e0:	4293      	cmp	r3, r2
    18e2:	d02f      	beq.n	1944 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    18e4:	4a1e      	ldr	r2, [pc, #120]	; (1960 <_ZN6SERCOM13initClockNVICEv+0x98>)
    18e6:	4293      	cmp	r3, r2
    18e8:	d02f      	beq.n	194a <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    18ea:	4a1e      	ldr	r2, [pc, #120]	; (1964 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    18ec:	4293      	cmp	r3, r2
    18ee:	d122      	bne.n	1936 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    18f0:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    18f2:	2219      	movs	r2, #25
    18f4:	e001      	b.n	18fa <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    18f6:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    18f8:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18fa:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    18fc:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18fe:	4099      	lsls	r1, r3
    1900:	4819      	ldr	r0, [pc, #100]	; (1968 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1902:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1904:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1906:	0899      	lsrs	r1, r3, #2
    1908:	402b      	ands	r3, r5
    190a:	40ab      	lsls	r3, r5
    190c:	35fc      	adds	r5, #252	; 0xfc
    190e:	409d      	lsls	r5, r3
    1910:	0089      	lsls	r1, r1, #2
    1912:	1809      	adds	r1, r1, r0
    1914:	00a4      	lsls	r4, r4, #2
    1916:	5908      	ldr	r0, [r1, r4]
    1918:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    191a:	25c0      	movs	r5, #192	; 0xc0
    191c:	409d      	lsls	r5, r3
    191e:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1920:	4303      	orrs	r3, r0
    1922:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    1924:	2380      	movs	r3, #128	; 0x80
    1926:	01db      	lsls	r3, r3, #7
    1928:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    192a:	4b10      	ldr	r3, [pc, #64]	; (196c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    192c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    192e:	785a      	ldrb	r2, [r3, #1]
    1930:	b252      	sxtb	r2, r2
    1932:	2a00      	cmp	r2, #0
    1934:	dbfb      	blt.n	192e <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    1936:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    1938:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    193a:	2215      	movs	r2, #21
    193c:	e7dd      	b.n	18fa <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    193e:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    1940:	2216      	movs	r2, #22
    1942:	e7da      	b.n	18fa <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    1944:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    1946:	2217      	movs	r2, #23
    1948:	e7d7      	b.n	18fa <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    194a:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    194c:	2218      	movs	r2, #24
    194e:	e7d4      	b.n	18fa <_ZN6SERCOM13initClockNVICEv+0x32>
    1950:	42000800 	.word	0x42000800
    1954:	42000c00 	.word	0x42000c00
    1958:	42001000 	.word	0x42001000
    195c:	42001400 	.word	0x42001400
    1960:	42001800 	.word	0x42001800
    1964:	42001c00 	.word	0x42001c00
    1968:	e000e100 	.word	0xe000e100
    196c:	40000c00 	.word	0x40000c00

00001970 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1972:	0004      	movs	r4, r0
    1974:	0016      	movs	r6, r2
    1976:	000f      	movs	r7, r1
    1978:	001d      	movs	r5, r3
  initClockNVIC();
    197a:	f7ff ffa5 	bl	18c8 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    197e:	0020      	movs	r0, r4
    1980:	f7ff ff58 	bl	1834 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1984:	221c      	movs	r2, #28
    1986:	00bb      	lsls	r3, r7, #2
    1988:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    198a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    198c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    198e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1990:	4313      	orrs	r3, r2
    1992:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    1994:	2384      	movs	r3, #132	; 0x84
    1996:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    1998:	2f01      	cmp	r7, #1
    199a:	d118      	bne.n	19ce <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    199c:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    199e:	2e01      	cmp	r6, #1
    19a0:	d000      	beq.n	19a4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    19a2:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    19a4:	4b0a      	ldr	r3, [pc, #40]	; (19d0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    19a6:	4369      	muls	r1, r5
    19a8:	6818      	ldr	r0, [r3, #0]
    19aa:	00c0      	lsls	r0, r0, #3
    19ac:	f000 fb28 	bl	2000 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    19b0:	2207      	movs	r2, #7
    19b2:	89a3      	ldrh	r3, [r4, #12]
    19b4:	4002      	ands	r2, r0
    19b6:	04db      	lsls	r3, r3, #19
    19b8:	0352      	lsls	r2, r2, #13
    19ba:	0cdb      	lsrs	r3, r3, #19
    19bc:	4313      	orrs	r3, r2
    19be:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    19c0:	0403      	lsls	r3, r0, #16
    19c2:	89a0      	ldrh	r0, [r4, #12]
    19c4:	0cdb      	lsrs	r3, r3, #19
    19c6:	0b40      	lsrs	r0, r0, #13
    19c8:	0340      	lsls	r0, r0, #13
    19ca:	4318      	orrs	r0, r3
    19cc:	81a0      	strh	r0, [r4, #12]
}
    19ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19d0:	2000002c 	.word	0x2000002c

000019d4 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    19d4:	2001      	movs	r0, #1
    19d6:	4770      	bx	lr

000019d8 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    19d8:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    19da:	6803      	ldr	r3, [r0, #0]
    19dc:	4a01      	ldr	r2, [pc, #4]	; (19e4 <_ZN4Uart5beginEm+0xc>)
    19de:	6a1b      	ldr	r3, [r3, #32]
    19e0:	4798      	blx	r3
}
    19e2:	bd10      	pop	{r4, pc}
    19e4:	00000413 	.word	0x00000413

000019e8 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    19e8:	6d82      	ldr	r2, [r0, #88]	; 0x58
    19ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
    19ec:	429a      	cmp	r2, r3
    19ee:	d003      	beq.n	19f8 <_ZN4Uart4peekEv+0x10>
    return -1;

  return _aucBuffer[_iTail];
    19f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    19f2:	18c0      	adds	r0, r0, r3
    19f4:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    19f6:	4770      	bx	lr
    return -1;
    19f8:	2001      	movs	r0, #1
    19fa:	4240      	negs	r0, r0
  return rxBuffer.peek();
    19fc:	e7fb      	b.n	19f6 <_ZN4Uart4peekEv+0xe>

000019fe <_ZN4Uart3endEv>:
{
    19fe:	b510      	push	{r4, lr}
    1a00:	0004      	movs	r4, r0
  sercom->resetUART();
    1a02:	6900      	ldr	r0, [r0, #16]
    1a04:	f7ff ff16 	bl	1834 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    1a08:	2300      	movs	r3, #0
    1a0a:	0022      	movs	r2, r4
    1a0c:	6563      	str	r3, [r4, #84]	; 0x54
    1a0e:	329c      	adds	r2, #156	; 0x9c
  _iTail = 0;
    1a10:	65a3      	str	r3, [r4, #88]	; 0x58
    1a12:	34a0      	adds	r4, #160	; 0xa0
  _iHead = 0;
    1a14:	6013      	str	r3, [r2, #0]
  _iTail = 0;
    1a16:	6023      	str	r3, [r4, #0]
}
    1a18:	bd10      	pop	{r4, pc}

00001a1a <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    1a1a:	20f0      	movs	r0, #240	; 0xf0
    1a1c:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    1a1e:	3930      	subs	r1, #48	; 0x30
    1a20:	4248      	negs	r0, r1
    1a22:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    1a24:	4770      	bx	lr

00001a26 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1a26:	23f0      	movs	r3, #240	; 0xf0
    1a28:	011b      	lsls	r3, r3, #4
    1a2a:	4019      	ands	r1, r3
    1a2c:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    1a2e:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    1a30:	009b      	lsls	r3, r3, #2
    1a32:	4299      	cmp	r1, r3
    1a34:	d00a      	beq.n	1a4c <_ZN4Uart15extractCharSizeEt+0x26>
    1a36:	3301      	adds	r3, #1
    1a38:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    1a3a:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    1a3c:	4299      	cmp	r1, r3
    1a3e:	d005      	beq.n	1a4c <_ZN4Uart15extractCharSizeEt+0x26>
    1a40:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    1a42:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    1a44:	005b      	lsls	r3, r3, #1
    1a46:	4299      	cmp	r1, r3
    1a48:	d000      	beq.n	1a4c <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    1a4a:	2000      	movs	r0, #0

  }
}
    1a4c:	4770      	bx	lr

00001a4e <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1a4e:	200f      	movs	r0, #15
    1a50:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    1a52:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    1a54:	2901      	cmp	r1, #1
    1a56:	d003      	beq.n	1a60 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    1a58:	3902      	subs	r1, #2
    1a5a:	1e48      	subs	r0, r1, #1
    1a5c:	4181      	sbcs	r1, r0
    1a5e:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    1a60:	4770      	bx	lr
	...

00001a64 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1a64:	0003      	movs	r3, r0
{
    1a66:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1a68:	2618      	movs	r6, #24
{
    1a6a:	b085      	sub	sp, #20
    1a6c:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1a6e:	33a4      	adds	r3, #164	; 0xa4
{
    1a70:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1a72:	7818      	ldrb	r0, [r3, #0]
    1a74:	0033      	movs	r3, r6
    1a76:	2108      	movs	r1, #8
    1a78:	4343      	muls	r3, r0
    1a7a:	4d33      	ldr	r5, [pc, #204]	; (1b48 <_ZN4Uart5beginEmt+0xe4>)
{
    1a7c:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1a7e:	18eb      	adds	r3, r5, r3
    1a80:	5659      	ldrsb	r1, [r3, r1]
    1a82:	f7ff fded 	bl	1660 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    1a86:	0023      	movs	r3, r4
    1a88:	33a5      	adds	r3, #165	; 0xa5
    1a8a:	7818      	ldrb	r0, [r3, #0]
    1a8c:	0033      	movs	r3, r6
    1a8e:	2108      	movs	r1, #8
    1a90:	4343      	muls	r3, r0
    1a92:	18eb      	adds	r3, r5, r3
    1a94:	5659      	ldrsb	r1, [r3, r1]
    1a96:	f7ff fde3 	bl	1660 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    1a9a:	0023      	movs	r3, r4
    1a9c:	33a7      	adds	r3, #167	; 0xa7
    1a9e:	781b      	ldrb	r3, [r3, #0]
    1aa0:	2b02      	cmp	r3, #2
    1aa2:	d10a      	bne.n	1aba <_ZN4Uart5beginEmt+0x56>
    if (uc_pinCTS != NO_CTS_PIN) {
    1aa4:	0023      	movs	r3, r4
    1aa6:	33b8      	adds	r3, #184	; 0xb8
    1aa8:	7818      	ldrb	r0, [r3, #0]
    1aaa:	28ff      	cmp	r0, #255	; 0xff
    1aac:	d005      	beq.n	1aba <_ZN4Uart5beginEmt+0x56>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    1aae:	2108      	movs	r1, #8
    1ab0:	4346      	muls	r6, r0
    1ab2:	19ae      	adds	r6, r5, r6
    1ab4:	5671      	ldrsb	r1, [r6, r1]
    1ab6:	f7ff fdd3 	bl	1660 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    1aba:	0026      	movs	r6, r4
    1abc:	36a8      	adds	r6, #168	; 0xa8
    1abe:	7830      	ldrb	r0, [r6, #0]
    1ac0:	28ff      	cmp	r0, #255	; 0xff
    1ac2:	d019      	beq.n	1af8 <_ZN4Uart5beginEmt+0x94>
    pinMode(uc_pinRTS, OUTPUT);
    1ac4:	2101      	movs	r1, #1
    1ac6:	f7ff fd53 	bl	1570 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1aca:	2218      	movs	r2, #24
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1acc:	0021      	movs	r1, r4
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1ace:	7833      	ldrb	r3, [r6, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1ad0:	481e      	ldr	r0, [pc, #120]	; (1b4c <_ZN4Uart5beginEmt+0xe8>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1ad2:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1ad4:	56ab      	ldrsb	r3, [r5, r2]
    1ad6:	31ac      	adds	r1, #172	; 0xac
    1ad8:	01db      	lsls	r3, r3, #7
    1ada:	1818      	adds	r0, r3, r0
    1adc:	6008      	str	r0, [r1, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1ade:	491c      	ldr	r1, [pc, #112]	; (1b50 <_ZN4Uart5beginEmt+0xec>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1ae0:	18ad      	adds	r5, r5, r2
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1ae2:	185b      	adds	r3, r3, r1
    1ae4:	0021      	movs	r1, r4
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1ae6:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1ae8:	31b0      	adds	r1, #176	; 0xb0
    1aea:	600b      	str	r3, [r1, #0]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1aec:	6869      	ldr	r1, [r5, #4]
    1aee:	408a      	lsls	r2, r1
    1af0:	0021      	movs	r1, r4
    1af2:	31b4      	adds	r1, #180	; 0xb4
    1af4:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    1af6:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    1af8:	2201      	movs	r2, #1
    1afa:	9b03      	ldr	r3, [sp, #12]
    1afc:	0011      	movs	r1, r2
    1afe:	6920      	ldr	r0, [r4, #16]
    1b00:	f7ff ff36 	bl	1970 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    1b04:	0039      	movs	r1, r7
    1b06:	0020      	movs	r0, r4
    1b08:	f7ff ff8d 	bl	1a26 <_ZN4Uart15extractCharSizeEt>
    1b0c:	0039      	movs	r1, r7
    1b0e:	0005      	movs	r5, r0
    1b10:	0020      	movs	r0, r4
    1b12:	f7ff ff9c 	bl	1a4e <_ZN4Uart13extractParityEt>
    1b16:	0039      	movs	r1, r7
    1b18:	0006      	movs	r6, r0
    1b1a:	0020      	movs	r0, r4
    1b1c:	f7ff ff7d 	bl	1a1a <_ZN4Uart16extractNbStopBitEt>
    1b20:	0033      	movs	r3, r6
    1b22:	9000      	str	r0, [sp, #0]
    1b24:	0029      	movs	r1, r5
    1b26:	6920      	ldr	r0, [r4, #16]
    1b28:	2201      	movs	r2, #1
    1b2a:	f7ff fe57 	bl	17dc <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    1b2e:	0023      	movs	r3, r4
    1b30:	33a6      	adds	r3, #166	; 0xa6
    1b32:	781a      	ldrb	r2, [r3, #0]
    1b34:	7859      	ldrb	r1, [r3, #1]
    1b36:	6920      	ldr	r0, [r4, #16]
    1b38:	f7ff fe6a 	bl	1810 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    1b3c:	6920      	ldr	r0, [r4, #16]
    1b3e:	f7ff fe85 	bl	184c <_ZN6SERCOM10enableUARTEv>
}
    1b42:	b005      	add	sp, #20
    1b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00002304 	.word	0x00002304
    1b4c:	41004418 	.word	0x41004418
    1b50:	41004414 	.word	0x41004414

00001b54 <_ZN11RingBufferNILi64EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
    1b54:	b510      	push	{r4, lr}
    memset( _aucBuffer, 0, N ) ;
    1b56:	2240      	movs	r2, #64	; 0x40
    1b58:	2100      	movs	r1, #0
RingBufferN<N>::RingBufferN( void )
    1b5a:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    1b5c:	f000 fb13 	bl	2186 <memset>
  _iHead = 0;
    1b60:	2300      	movs	r3, #0
}
    1b62:	0020      	movs	r0, r4
  _iHead = 0;
    1b64:	6423      	str	r3, [r4, #64]	; 0x40
  _iTail = 0;
    1b66:	6463      	str	r3, [r4, #68]	; 0x44
}
    1b68:	bd10      	pop	{r4, pc}
	...

00001b6c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    1b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b6e:	001d      	movs	r5, r3
    1b70:	ab08      	add	r3, sp, #32
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	0004      	movs	r4, r0
    1b76:	9300      	str	r3, [sp, #0]
    1b78:	ab09      	add	r3, sp, #36	; 0x24
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	0016      	movs	r6, r2
    1b7e:	9301      	str	r3, [sp, #4]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b80:	2300      	movs	r3, #0
    1b82:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1b84:	23fa      	movs	r3, #250	; 0xfa
    1b86:	009b      	lsls	r3, r3, #2
    1b88:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    1b8a:	4b0e      	ldr	r3, [pc, #56]	; (1bc4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    1b8c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    1b8e:	3308      	adds	r3, #8
    1b90:	6003      	str	r3, [r0, #0]
    1b92:	3014      	adds	r0, #20
    1b94:	f7ff ffde 	bl	1b54 <_ZN11RingBufferNILi64EEC1Ev>
    1b98:	0020      	movs	r0, r4
    1b9a:	305c      	adds	r0, #92	; 0x5c
    1b9c:	f7ff ffda 	bl	1b54 <_ZN11RingBufferNILi64EEC1Ev>
  uc_padRX = _padRX ;
    1ba0:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    1ba2:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    1ba4:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    1ba6:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    1ba8:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    1baa:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    1bac:	466a      	mov	r2, sp
    1bae:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    1bb0:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    1bb2:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    1bb4:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    1bb6:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    1bb8:	23ff      	movs	r3, #255	; 0xff
    1bba:	32a8      	adds	r2, #168	; 0xa8
}
    1bbc:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    1bbe:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    1bc0:	7413      	strb	r3, [r2, #16]
}
    1bc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bc4:	00002724 	.word	0x00002724

00001bc8 <_ZN11RingBufferNILi64EE9availableEv>:
  int delta = _iHead - _iTail;
    1bc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1bca:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1bcc:	1a18      	subs	r0, r3, r0
  if(delta < 0)
    1bce:	d500      	bpl.n	1bd2 <_ZN11RingBufferNILi64EE9availableEv+0xa>
    return N + delta;
    1bd0:	3040      	adds	r0, #64	; 0x40
}
    1bd2:	4770      	bx	lr

00001bd4 <_ZN4Uart5flushEv>:
{
    1bd4:	b510      	push	{r4, lr}
    1bd6:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    1bd8:	0020      	movs	r0, r4
    1bda:	305c      	adds	r0, #92	; 0x5c
    1bdc:	f7ff fff4 	bl	1bc8 <_ZN11RingBufferNILi64EE9availableEv>
    1be0:	2800      	cmp	r0, #0
    1be2:	d1f9      	bne.n	1bd8 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    1be4:	6920      	ldr	r0, [r4, #16]
    1be6:	f7ff fe3a 	bl	185e <_ZN6SERCOM9flushUARTEv>
}
    1bea:	bd10      	pop	{r4, pc}

00001bec <_ZN4Uart9availableEv>:
{
    1bec:	b510      	push	{r4, lr}
  return rxBuffer.available();
    1bee:	3014      	adds	r0, #20
    1bf0:	f7ff ffea 	bl	1bc8 <_ZN11RingBufferNILi64EE9availableEv>
}
    1bf4:	bd10      	pop	{r4, pc}

00001bf6 <_ZN11RingBufferNILi64EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    1bf6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1bf8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1bfa:	429a      	cmp	r2, r3
    1bfc:	db04      	blt.n	1c08 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x12>
    return N - 1 - _iHead + _iTail;
    1bfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1c00:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1c02:	1ac0      	subs	r0, r0, r3
    1c04:	303f      	adds	r0, #63	; 0x3f
}
    1c06:	4770      	bx	lr
    return _iTail - _iHead - 1;
    1c08:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1c0a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    1c0c:	1a18      	subs	r0, r3, r0
    1c0e:	3801      	subs	r0, #1
    1c10:	e7f9      	b.n	1c06 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x10>

00001c12 <_ZN4Uart17availableForWriteEv>:
{
    1c12:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    1c14:	305c      	adds	r0, #92	; 0x5c
    1c16:	f7ff ffee 	bl	1bf6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
}
    1c1a:	bd10      	pop	{r4, pc}

00001c1c <_ZN4Uart10IrqHandlerEv>:
{
    1c1c:	b570      	push	{r4, r5, r6, lr}
    1c1e:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    1c20:	6900      	ldr	r0, [r0, #16]
    1c22:	f7ff fe28 	bl	1876 <_ZN6SERCOM17availableDataUARTEv>
    1c26:	2800      	cmp	r0, #0
    1c28:	d01f      	beq.n	1c6a <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
    1c2a:	6920      	ldr	r0, [r4, #16]
    1c2c:	f7ff fe38 	bl	18a0 <_ZN6SERCOM12readDataUARTEv>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    1c30:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    1c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(index + 1) % N;
    1c34:	3301      	adds	r3, #1
    1c36:	4013      	ands	r3, r2
  if ( i != _iTail )
    1c38:	6da2      	ldr	r2, [r4, #88]	; 0x58
    1c3a:	4293      	cmp	r3, r2
    1c3c:	d003      	beq.n	1c46 <_ZN4Uart10IrqHandlerEv+0x2a>
    _aucBuffer[_iHead] = c ;
    1c3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    1c40:	18a2      	adds	r2, r4, r2
    1c42:	7510      	strb	r0, [r2, #20]
    _iHead = i ;
    1c44:	6563      	str	r3, [r4, #84]	; 0x54
    if (uc_pinRTS != NO_RTS_PIN) {
    1c46:	0023      	movs	r3, r4
    1c48:	33a8      	adds	r3, #168	; 0xa8
    1c4a:	781b      	ldrb	r3, [r3, #0]
    1c4c:	2bff      	cmp	r3, #255	; 0xff
    1c4e:	d00c      	beq.n	1c6a <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
    1c50:	0020      	movs	r0, r4
    1c52:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    1c54:	f7ff ffcf 	bl	1bf6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    1c58:	2809      	cmp	r0, #9
    1c5a:	dc06      	bgt.n	1c6a <_ZN4Uart10IrqHandlerEv+0x4e>
        *pul_outsetRTS = ul_pinMaskRTS;
    1c5c:	0023      	movs	r3, r4
    1c5e:	0022      	movs	r2, r4
    1c60:	33ac      	adds	r3, #172	; 0xac
    1c62:	32b4      	adds	r2, #180	; 0xb4
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	6812      	ldr	r2, [r2, #0]
    1c68:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    1c6a:	6920      	ldr	r0, [r4, #16]
    1c6c:	f7ff fe13 	bl	1896 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1c70:	2800      	cmp	r0, #0
    1c72:	d019      	beq.n	1ca8 <_ZN4Uart10IrqHandlerEv+0x8c>
    if (txBuffer.available()) {
    1c74:	0025      	movs	r5, r4
    1c76:	355c      	adds	r5, #92	; 0x5c
    1c78:	0028      	movs	r0, r5
    1c7a:	f7ff ffa5 	bl	1bc8 <_ZN11RingBufferNILi64EE9availableEv>
    1c7e:	2800      	cmp	r0, #0
    1c80:	d021      	beq.n	1cc6 <_ZN4Uart10IrqHandlerEv+0xaa>
  if(_iTail == _iHead)
    1c82:	0022      	movs	r2, r4
    1c84:	0023      	movs	r3, r4
    1c86:	32a0      	adds	r2, #160	; 0xa0
    1c88:	339c      	adds	r3, #156	; 0x9c
    1c8a:	6811      	ldr	r1, [r2, #0]
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	4299      	cmp	r1, r3
    1c90:	d016      	beq.n	1cc0 <_ZN4Uart10IrqHandlerEv+0xa4>
  return (uint32_t)(index + 1) % N;
    1c92:	203f      	movs	r0, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
    1c94:	6813      	ldr	r3, [r2, #0]
    1c96:	5ce9      	ldrb	r1, [r5, r3]
  _iTail = nextIndex(_iTail);
    1c98:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
    1c9a:	3301      	adds	r3, #1
    1c9c:	4003      	ands	r3, r0
  _iTail = nextIndex(_iTail);
    1c9e:	6013      	str	r3, [r2, #0]
      sercom->writeDataUART(data);
    1ca0:	b2c9      	uxtb	r1, r1
    1ca2:	6920      	ldr	r0, [r4, #16]
    1ca4:	f7ff fe00 	bl	18a8 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    1ca8:	6920      	ldr	r0, [r4, #16]
    1caa:	f7ff fde9 	bl	1880 <_ZN6SERCOM11isUARTErrorEv>
    1cae:	2800      	cmp	r0, #0
    1cb0:	d005      	beq.n	1cbe <_ZN4Uart10IrqHandlerEv+0xa2>
    sercom->acknowledgeUARTError();
    1cb2:	6920      	ldr	r0, [r4, #16]
    1cb4:	f7ff fde8 	bl	1888 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    1cb8:	6920      	ldr	r0, [r4, #16]
    1cba:	f7ff fdd8 	bl	186e <_ZN6SERCOM15clearStatusUARTEv>
}
    1cbe:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    1cc0:	2101      	movs	r1, #1
    1cc2:	4249      	negs	r1, r1
    1cc4:	e7ec      	b.n	1ca0 <_ZN4Uart10IrqHandlerEv+0x84>
      sercom->disableDataRegisterEmptyInterruptUART();
    1cc6:	6920      	ldr	r0, [r4, #16]
    1cc8:	f7ff fdfa 	bl	18c0 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    1ccc:	e7ec      	b.n	1ca8 <_ZN4Uart10IrqHandlerEv+0x8c>
	...

00001cd0 <_ZN4Uart5writeEh>:
{
    1cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cd2:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1cd4:	6900      	ldr	r0, [r0, #16]
{
    1cd6:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1cd8:	f7ff fddd 	bl	1896 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1cdc:	2800      	cmp	r0, #0
    1cde:	d126      	bne.n	1d2e <_ZN4Uart5writeEh+0x5e>
  return (uint32_t)(index + 1) % N;
    1ce0:	263f      	movs	r6, #63	; 0x3f
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    1ce2:	2701      	movs	r7, #1
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    1ce4:	0022      	movs	r2, r4
    1ce6:	0021      	movs	r1, r4
    1ce8:	329c      	adds	r2, #156	; 0x9c
    1cea:	6813      	ldr	r3, [r2, #0]
    1cec:	31a0      	adds	r1, #160	; 0xa0
    1cee:	6808      	ldr	r0, [r1, #0]
  return (uint32_t)(index + 1) % N;
    1cf0:	3301      	adds	r3, #1
    1cf2:	4033      	ands	r3, r6
    while(txBuffer.isFull()) {
    1cf4:	4283      	cmp	r3, r0
    1cf6:	d12e      	bne.n	1d56 <_ZN4Uart5writeEh+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1cf8:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    1cfc:	423b      	tst	r3, r7
    1cfe:	d10d      	bne.n	1d1c <_ZN4Uart5writeEh+0x4c>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    1d00:	4b1d      	ldr	r3, [pc, #116]	; (1d78 <_ZN4Uart5writeEh+0xa8>)
    1d02:	685b      	ldr	r3, [r3, #4]
    1d04:	05db      	lsls	r3, r3, #23
    1d06:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    1d08:	d0ec      	beq.n	1ce4 <_ZN4Uart5writeEh+0x14>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    1d0a:	3b10      	subs	r3, #16
    1d0c:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    1d0e:	2b00      	cmp	r3, #0
    1d10:	db18      	blt.n	1d44 <_ZN4Uart5writeEh+0x74>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    1d12:	089b      	lsrs	r3, r3, #2
    1d14:	33c0      	adds	r3, #192	; 0xc0
    1d16:	4a19      	ldr	r2, [pc, #100]	; (1d7c <_ZN4Uart5writeEh+0xac>)
    1d18:	009b      	lsls	r3, r3, #2
    1d1a:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    1d1c:	6920      	ldr	r0, [r4, #16]
    1d1e:	f7ff fdba 	bl	1896 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1d22:	2800      	cmp	r0, #0
    1d24:	d0de      	beq.n	1ce4 <_ZN4Uart5writeEh+0x14>
        IrqHandler();
    1d26:	0020      	movs	r0, r4
    1d28:	f7ff ff78 	bl	1c1c <_ZN4Uart10IrqHandlerEv>
    1d2c:	e7da      	b.n	1ce4 <_ZN4Uart5writeEh+0x14>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1d2e:	0020      	movs	r0, r4
    1d30:	305c      	adds	r0, #92	; 0x5c
    1d32:	f7ff ff49 	bl	1bc8 <_ZN11RingBufferNILi64EE9availableEv>
    1d36:	2800      	cmp	r0, #0
    1d38:	d1d2      	bne.n	1ce0 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    1d3a:	0029      	movs	r1, r5
    1d3c:	6920      	ldr	r0, [r4, #16]
    1d3e:	f7ff fdb3 	bl	18a8 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    1d42:	e016      	b.n	1d72 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    1d44:	220f      	movs	r2, #15
    1d46:	4013      	ands	r3, r2
    1d48:	3b08      	subs	r3, #8
    1d4a:	089b      	lsrs	r3, r3, #2
    1d4c:	4a0c      	ldr	r2, [pc, #48]	; (1d80 <_ZN4Uart5writeEh+0xb0>)
    1d4e:	009b      	lsls	r3, r3, #2
    1d50:	189b      	adds	r3, r3, r2
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	e7e2      	b.n	1d1c <_ZN4Uart5writeEh+0x4c>
  int i = nextIndex(_iHead);
    1d56:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
    1d58:	3301      	adds	r3, #1
    1d5a:	401e      	ands	r6, r3
  if ( i != _iTail )
    1d5c:	680b      	ldr	r3, [r1, #0]
    1d5e:	429e      	cmp	r6, r3
    1d60:	d004      	beq.n	1d6c <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    1d62:	0021      	movs	r1, r4
    1d64:	6813      	ldr	r3, [r2, #0]
    1d66:	315c      	adds	r1, #92	; 0x5c
    1d68:	54cd      	strb	r5, [r1, r3]
    _iHead = i ;
    1d6a:	6016      	str	r6, [r2, #0]
    sercom->enableDataRegisterEmptyInterruptUART();
    1d6c:	6920      	ldr	r0, [r4, #16]
    1d6e:	f7ff fda3 	bl	18b8 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    1d72:	2001      	movs	r0, #1
    1d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	e000ed00 	.word	0xe000ed00
    1d7c:	e000e100 	.word	0xe000e100
    1d80:	e000ed1c 	.word	0xe000ed1c

00001d84 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    1d84:	6d82      	ldr	r2, [r0, #88]	; 0x58
    1d86:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
    1d88:	b570      	push	{r4, r5, r6, lr}
    1d8a:	0004      	movs	r4, r0
    1d8c:	429a      	cmp	r2, r3
    1d8e:	d01a      	beq.n	1dc6 <_ZN4Uart4readEv+0x42>
  return (uint32_t)(index + 1) % N;
    1d90:	223f      	movs	r2, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
    1d92:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1d94:	18c3      	adds	r3, r0, r3
    1d96:	7d1d      	ldrb	r5, [r3, #20]
  _iTail = nextIndex(_iTail);
    1d98:	6d83      	ldr	r3, [r0, #88]	; 0x58
  return (uint32_t)(index + 1) % N;
    1d9a:	3301      	adds	r3, #1
    1d9c:	4013      	ands	r3, r2
  _iTail = nextIndex(_iTail);
    1d9e:	6583      	str	r3, [r0, #88]	; 0x58
  if (uc_pinRTS != NO_RTS_PIN) {
    1da0:	0023      	movs	r3, r4
    1da2:	33a8      	adds	r3, #168	; 0xa8
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	2bff      	cmp	r3, #255	; 0xff
    1da8:	d00b      	beq.n	1dc2 <_ZN4Uart4readEv+0x3e>
  int c = rxBuffer.read_char();
    1daa:	0020      	movs	r0, r4
    1dac:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    1dae:	f7ff ff22 	bl	1bf6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    1db2:	280a      	cmp	r0, #10
    1db4:	dd05      	ble.n	1dc2 <_ZN4Uart4readEv+0x3e>
      *pul_outclrRTS = ul_pinMaskRTS;
    1db6:	0023      	movs	r3, r4
    1db8:	34b4      	adds	r4, #180	; 0xb4
    1dba:	33b0      	adds	r3, #176	; 0xb0
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	6822      	ldr	r2, [r4, #0]
    1dc0:	601a      	str	r2, [r3, #0]
}
    1dc2:	0028      	movs	r0, r5
    1dc4:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    1dc6:	2501      	movs	r5, #1
    1dc8:	426d      	negs	r5, r5
    1dca:	e7e9      	b.n	1da0 <_ZN4Uart4readEv+0x1c>

00001dcc <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    1dcc:	203f      	movs	r0, #63	; 0x3f
    1dce:	4770      	bx	lr

00001dd0 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    1dd0:	b513      	push	{r0, r1, r4, lr}
    1dd2:	466b      	mov	r3, sp
	return write(&c, 1);
    1dd4:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    1dd6:	71d9      	strb	r1, [r3, #7]
    1dd8:	3307      	adds	r3, #7
	return write(&c, 1);
    1dda:	6854      	ldr	r4, [r2, #4]
    1ddc:	0019      	movs	r1, r3
    1dde:	2201      	movs	r2, #1
    1de0:	47a0      	blx	r4
}
    1de2:	bd16      	pop	{r1, r2, r4, pc}

00001de4 <_ZN7Serial_9availableEv>:
{
    1de4:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    1de6:	2102      	movs	r1, #2
    1de8:	6900      	ldr	r0, [r0, #16]
    1dea:	f7fe ff05 	bl	bf8 <_ZN14USBDeviceClass9availableEm>
}
    1dee:	bd10      	pop	{r4, pc}

00001df0 <_ZN7Serial_5flushEv>:
{
    1df0:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    1df2:	2103      	movs	r1, #3
    1df4:	6900      	ldr	r0, [r0, #16]
    1df6:	f7fe ff15 	bl	c24 <_ZN14USBDeviceClass5flushEm>
}
    1dfa:	bd10      	pop	{r4, pc}

00001dfc <_ZN7Serial_5writeEPKhj>:
{
    1dfc:	b510      	push	{r4, lr}
    1dfe:	0013      	movs	r3, r2
    1e00:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    1e02:	000a      	movs	r2, r1
    1e04:	6900      	ldr	r0, [r0, #16]
    1e06:	2103      	movs	r1, #3
    1e08:	f7ff f806 	bl	e18 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    1e0c:	2800      	cmp	r0, #0
    1e0e:	d101      	bne.n	1e14 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    1e10:	2301      	movs	r3, #1
    1e12:	6063      	str	r3, [r4, #4]
}
    1e14:	bd10      	pop	{r4, pc}
	...

00001e18 <_ZN7Serial_4peekEv>:
{
    1e18:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    1e1a:	4c05      	ldr	r4, [pc, #20]	; (1e30 <_ZN7Serial_4peekEv+0x18>)
    1e1c:	6823      	ldr	r3, [r4, #0]
    1e1e:	1c5a      	adds	r2, r3, #1
    1e20:	d104      	bne.n	1e2c <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    1e22:	6803      	ldr	r3, [r0, #0]
    1e24:	695b      	ldr	r3, [r3, #20]
    1e26:	4798      	blx	r3
    1e28:	0003      	movs	r3, r0
    1e2a:	6020      	str	r0, [r4, #0]
}
    1e2c:	0018      	movs	r0, r3
    1e2e:	bd10      	pop	{r4, pc}
    1e30:	20000080 	.word	0x20000080

00001e34 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    1e34:	4b07      	ldr	r3, [pc, #28]	; (1e54 <_ZN7Serial_4readEv+0x20>)
{
    1e36:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    1e38:	6818      	ldr	r0, [r3, #0]
{
    1e3a:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    1e3c:	1c41      	adds	r1, r0, #1
    1e3e:	d003      	beq.n	1e48 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    1e40:	2201      	movs	r2, #1
    1e42:	4252      	negs	r2, r2
    1e44:	601a      	str	r2, [r3, #0]
}
    1e46:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    1e48:	2102      	movs	r1, #2
    1e4a:	6910      	ldr	r0, [r2, #16]
    1e4c:	f7fe ffd6 	bl	dfc <_ZN14USBDeviceClass4recvEm>
    1e50:	e7f9      	b.n	1e46 <_ZN7Serial_4readEv+0x12>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	20000080 	.word	0x20000080

00001e58 <_Z16CDC_GetInterfacePh>:
{
    1e58:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    1e5a:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1e5c:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    1e5e:	3302      	adds	r3, #2
    1e60:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1e62:	4902      	ldr	r1, [pc, #8]	; (1e6c <_Z16CDC_GetInterfacePh+0x14>)
    1e64:	4802      	ldr	r0, [pc, #8]	; (1e70 <_Z16CDC_GetInterfacePh+0x18>)
    1e66:	f7ff f883 	bl	f70 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1e6a:	bd10      	pop	{r4, pc}
    1e6c:	2000003c 	.word	0x2000003c
    1e70:	20000124 	.word	0x20000124

00001e74 <_Z9CDC_SetupR8USBSetup>:
{
    1e74:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    1e76:	7801      	ldrb	r1, [r0, #0]
{
    1e78:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    1e7a:	7842      	ldrb	r2, [r0, #1]
	return false;
    1e7c:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    1e7e:	29a1      	cmp	r1, #161	; 0xa1
    1e80:	d108      	bne.n	1e94 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    1e82:	2a21      	cmp	r2, #33	; 0x21
    1e84:	d105      	bne.n	1e92 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    1e86:	3a1a      	subs	r2, #26
    1e88:	4916      	ldr	r1, [pc, #88]	; (1ee4 <_Z9CDC_SetupR8USBSetup+0x70>)
    1e8a:	4817      	ldr	r0, [pc, #92]	; (1ee8 <_Z9CDC_SetupR8USBSetup+0x74>)
    1e8c:	f7ff f870 	bl	f70 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    1e90:	2001      	movs	r0, #1
}
    1e92:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    1e94:	2921      	cmp	r1, #33	; 0x21
    1e96:	d1fc      	bne.n	1e92 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    1e98:	2a20      	cmp	r2, #32
    1e9a:	d111      	bne.n	1ec0 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    1e9c:	3a19      	subs	r2, #25
    1e9e:	4911      	ldr	r1, [pc, #68]	; (1ee4 <_Z9CDC_SetupR8USBSetup+0x70>)
    1ea0:	4811      	ldr	r0, [pc, #68]	; (1ee8 <_Z9CDC_SetupR8USBSetup+0x74>)
    1ea2:	f7fe ff03 	bl	cac <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    1ea6:	2296      	movs	r2, #150	; 0x96
    1ea8:	4b0e      	ldr	r3, [pc, #56]	; (1ee4 <_Z9CDC_SetupR8USBSetup+0x70>)
    1eaa:	00d2      	lsls	r2, r2, #3
    1eac:	6819      	ldr	r1, [r3, #0]
    1eae:	4291      	cmp	r1, r2
    1eb0:	d103      	bne.n	1eba <_Z9CDC_SetupR8USBSetup+0x46>
    1eb2:	2401      	movs	r4, #1
    1eb4:	79d8      	ldrb	r0, [r3, #7]
    1eb6:	4004      	ands	r4, r0
    1eb8:	d00e      	beq.n	1ed8 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    1eba:	f7fe fa0b 	bl	2d4 <cancelReset>
    1ebe:	e00e      	b.n	1ede <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    1ec0:	2a22      	cmp	r2, #34	; 0x22
    1ec2:	d103      	bne.n	1ecc <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    1ec4:	789a      	ldrb	r2, [r3, #2]
    1ec6:	4b07      	ldr	r3, [pc, #28]	; (1ee4 <_Z9CDC_SetupR8USBSetup+0x70>)
    1ec8:	71da      	strb	r2, [r3, #7]
    1eca:	e7ec      	b.n	1ea6 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    1ecc:	2a23      	cmp	r2, #35	; 0x23
    1ece:	d1e0      	bne.n	1e92 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    1ed0:	885a      	ldrh	r2, [r3, #2]
    1ed2:	4b06      	ldr	r3, [pc, #24]	; (1eec <_Z9CDC_SetupR8USBSetup+0x78>)
    1ed4:	601a      	str	r2, [r3, #0]
			return false;
    1ed6:	e7dc      	b.n	1e92 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    1ed8:	20fa      	movs	r0, #250	; 0xfa
    1eda:	f7fe f9f5 	bl	2c8 <initiateReset>
			return false;
    1ede:	2000      	movs	r0, #0
    1ee0:	e7d7      	b.n	1e92 <_Z9CDC_SetupR8USBSetup+0x1e>
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	20000034 	.word	0x20000034
    1ee8:	20000124 	.word	0x20000124
    1eec:	20000030 	.word	0x20000030

00001ef0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    1ef0:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    1ef2:	2100      	movs	r1, #0
    1ef4:	4b05      	ldr	r3, [pc, #20]	; (1f0c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    1ef6:	0092      	lsls	r2, r2, #2
    1ef8:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    1efa:	4a05      	ldr	r2, [pc, #20]	; (1f10 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    1efc:	6059      	str	r1, [r3, #4]
    1efe:	3208      	adds	r2, #8
    1f00:	601a      	str	r2, [r3, #0]
    1f02:	4a04      	ldr	r2, [pc, #16]	; (1f14 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    1f04:	7619      	strb	r1, [r3, #24]
    1f06:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    1f08:	4770      	bx	lr
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	20000870 	.word	0x20000870
    1f10:	00002758 	.word	0x00002758
    1f14:	20000124 	.word	0x20000124

00001f18 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	000e      	movs	r6, r1
	int sent = 0;
    1f1c:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1f1e:	6844      	ldr	r4, [r0, #4]
    1f20:	2c00      	cmp	r4, #0
    1f22:	d00b      	beq.n	1f3c <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    1f24:	6823      	ldr	r3, [r4, #0]
    1f26:	0031      	movs	r1, r6
    1f28:	685b      	ldr	r3, [r3, #4]
    1f2a:	0020      	movs	r0, r4
    1f2c:	4798      	blx	r3
		if (res < 0)
    1f2e:	2800      	cmp	r0, #0
    1f30:	db02      	blt.n	1f38 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    1f32:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    1f34:	68e4      	ldr	r4, [r4, #12]
    1f36:	e7f3      	b.n	1f20 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    1f38:	2501      	movs	r5, #1
    1f3a:	426d      	negs	r5, r5
	}
	return sent;
}
    1f3c:	0028      	movs	r0, r5
    1f3e:	bd70      	pop	{r4, r5, r6, pc}

00001f40 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1f40:	b570      	push	{r4, r5, r6, lr}
    1f42:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1f44:	6844      	ldr	r4, [r0, #4]
    1f46:	2c00      	cmp	r4, #0
    1f48:	d008      	beq.n	1f5c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    1f4a:	6823      	ldr	r3, [r4, #0]
    1f4c:	0029      	movs	r1, r5
    1f4e:	689b      	ldr	r3, [r3, #8]
    1f50:	0020      	movs	r0, r4
    1f52:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    1f54:	2800      	cmp	r0, #0
    1f56:	d102      	bne.n	1f5e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1f58:	68e4      	ldr	r4, [r4, #12]
    1f5a:	e7f4      	b.n	1f46 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    1f5c:	0020      	movs	r0, r4
}
    1f5e:	bd70      	pop	{r4, r5, r6, pc}

00001f60 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1f60:	b570      	push	{r4, r5, r6, lr}
    1f62:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1f64:	6844      	ldr	r4, [r0, #4]
    1f66:	2c00      	cmp	r4, #0
    1f68:	d007      	beq.n	1f7a <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    1f6a:	6823      	ldr	r3, [r4, #0]
    1f6c:	0029      	movs	r1, r5
    1f6e:	0020      	movs	r0, r4
    1f70:	68db      	ldr	r3, [r3, #12]
    1f72:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    1f74:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    1f76:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    1f78:	e7f5      	b.n	1f66 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    1f7a:	702c      	strb	r4, [r5, #0]
}
    1f7c:	bd70      	pop	{r4, r5, r6, pc}

00001f7e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1f7e:	b570      	push	{r4, r5, r6, lr}
    1f80:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1f82:	6844      	ldr	r4, [r0, #4]
    1f84:	2c00      	cmp	r4, #0
    1f86:	d008      	beq.n	1f9a <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    1f88:	6823      	ldr	r3, [r4, #0]
    1f8a:	0029      	movs	r1, r5
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	0020      	movs	r0, r4
    1f90:	4798      	blx	r3
    1f92:	2800      	cmp	r0, #0
    1f94:	d102      	bne.n	1f9c <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1f96:	68e4      	ldr	r4, [r4, #12]
    1f98:	e7f4      	b.n	1f84 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    1f9a:	0020      	movs	r0, r4
}
    1f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001fa0 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1fa0:	2101      	movs	r1, #1
    1fa2:	4a06      	ldr	r2, [pc, #24]	; (1fbc <_Z12PluggableUSBv+0x1c>)
{
    1fa4:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    1fa6:	6813      	ldr	r3, [r2, #0]
    1fa8:	4805      	ldr	r0, [pc, #20]	; (1fc0 <_Z12PluggableUSBv+0x20>)
    1faa:	400b      	ands	r3, r1
    1fac:	d105      	bne.n	1fba <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1fae:	2402      	movs	r4, #2
    1fb0:	7004      	strb	r4, [r0, #0]
    1fb2:	1924      	adds	r4, r4, r4
    1fb4:	7044      	strb	r4, [r0, #1]
    1fb6:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    1fb8:	6011      	str	r1, [r2, #0]
}
    1fba:	bd10      	pop	{r4, pc}
    1fbc:	2000088c 	.word	0x2000088c
    1fc0:	20000890 	.word	0x20000890

00001fc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1fc6:	0006      	movs	r6, r0
    1fc8:	000d      	movs	r5, r1
    1fca:	000c      	movs	r4, r1
    1fcc:	188b      	adds	r3, r1, r2
    1fce:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    1fd0:	9b01      	ldr	r3, [sp, #4]
    1fd2:	1b67      	subs	r7, r4, r5
    1fd4:	429c      	cmp	r4, r3
    1fd6:	d007      	beq.n	1fe8 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    1fd8:	6833      	ldr	r3, [r6, #0]
    1fda:	7821      	ldrb	r1, [r4, #0]
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	0030      	movs	r0, r6
    1fe0:	4798      	blx	r3
    1fe2:	3401      	adds	r4, #1
    1fe4:	2800      	cmp	r0, #0
    1fe6:	d1f3      	bne.n	1fd0 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    1fe8:	0038      	movs	r0, r7
    1fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001fec <__gnu_thumb1_case_uqi>:
    1fec:	b402      	push	{r1}
    1fee:	4671      	mov	r1, lr
    1ff0:	0849      	lsrs	r1, r1, #1
    1ff2:	0049      	lsls	r1, r1, #1
    1ff4:	5c09      	ldrb	r1, [r1, r0]
    1ff6:	0049      	lsls	r1, r1, #1
    1ff8:	448e      	add	lr, r1
    1ffa:	bc02      	pop	{r1}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			; (mov r8, r8)

00002000 <__udivsi3>:
    2000:	2200      	movs	r2, #0
    2002:	0843      	lsrs	r3, r0, #1
    2004:	428b      	cmp	r3, r1
    2006:	d374      	bcc.n	20f2 <__udivsi3+0xf2>
    2008:	0903      	lsrs	r3, r0, #4
    200a:	428b      	cmp	r3, r1
    200c:	d35f      	bcc.n	20ce <__udivsi3+0xce>
    200e:	0a03      	lsrs	r3, r0, #8
    2010:	428b      	cmp	r3, r1
    2012:	d344      	bcc.n	209e <__udivsi3+0x9e>
    2014:	0b03      	lsrs	r3, r0, #12
    2016:	428b      	cmp	r3, r1
    2018:	d328      	bcc.n	206c <__udivsi3+0x6c>
    201a:	0c03      	lsrs	r3, r0, #16
    201c:	428b      	cmp	r3, r1
    201e:	d30d      	bcc.n	203c <__udivsi3+0x3c>
    2020:	22ff      	movs	r2, #255	; 0xff
    2022:	0209      	lsls	r1, r1, #8
    2024:	ba12      	rev	r2, r2
    2026:	0c03      	lsrs	r3, r0, #16
    2028:	428b      	cmp	r3, r1
    202a:	d302      	bcc.n	2032 <__udivsi3+0x32>
    202c:	1212      	asrs	r2, r2, #8
    202e:	0209      	lsls	r1, r1, #8
    2030:	d065      	beq.n	20fe <__udivsi3+0xfe>
    2032:	0b03      	lsrs	r3, r0, #12
    2034:	428b      	cmp	r3, r1
    2036:	d319      	bcc.n	206c <__udivsi3+0x6c>
    2038:	e000      	b.n	203c <__udivsi3+0x3c>
    203a:	0a09      	lsrs	r1, r1, #8
    203c:	0bc3      	lsrs	r3, r0, #15
    203e:	428b      	cmp	r3, r1
    2040:	d301      	bcc.n	2046 <__udivsi3+0x46>
    2042:	03cb      	lsls	r3, r1, #15
    2044:	1ac0      	subs	r0, r0, r3
    2046:	4152      	adcs	r2, r2
    2048:	0b83      	lsrs	r3, r0, #14
    204a:	428b      	cmp	r3, r1
    204c:	d301      	bcc.n	2052 <__udivsi3+0x52>
    204e:	038b      	lsls	r3, r1, #14
    2050:	1ac0      	subs	r0, r0, r3
    2052:	4152      	adcs	r2, r2
    2054:	0b43      	lsrs	r3, r0, #13
    2056:	428b      	cmp	r3, r1
    2058:	d301      	bcc.n	205e <__udivsi3+0x5e>
    205a:	034b      	lsls	r3, r1, #13
    205c:	1ac0      	subs	r0, r0, r3
    205e:	4152      	adcs	r2, r2
    2060:	0b03      	lsrs	r3, r0, #12
    2062:	428b      	cmp	r3, r1
    2064:	d301      	bcc.n	206a <__udivsi3+0x6a>
    2066:	030b      	lsls	r3, r1, #12
    2068:	1ac0      	subs	r0, r0, r3
    206a:	4152      	adcs	r2, r2
    206c:	0ac3      	lsrs	r3, r0, #11
    206e:	428b      	cmp	r3, r1
    2070:	d301      	bcc.n	2076 <__udivsi3+0x76>
    2072:	02cb      	lsls	r3, r1, #11
    2074:	1ac0      	subs	r0, r0, r3
    2076:	4152      	adcs	r2, r2
    2078:	0a83      	lsrs	r3, r0, #10
    207a:	428b      	cmp	r3, r1
    207c:	d301      	bcc.n	2082 <__udivsi3+0x82>
    207e:	028b      	lsls	r3, r1, #10
    2080:	1ac0      	subs	r0, r0, r3
    2082:	4152      	adcs	r2, r2
    2084:	0a43      	lsrs	r3, r0, #9
    2086:	428b      	cmp	r3, r1
    2088:	d301      	bcc.n	208e <__udivsi3+0x8e>
    208a:	024b      	lsls	r3, r1, #9
    208c:	1ac0      	subs	r0, r0, r3
    208e:	4152      	adcs	r2, r2
    2090:	0a03      	lsrs	r3, r0, #8
    2092:	428b      	cmp	r3, r1
    2094:	d301      	bcc.n	209a <__udivsi3+0x9a>
    2096:	020b      	lsls	r3, r1, #8
    2098:	1ac0      	subs	r0, r0, r3
    209a:	4152      	adcs	r2, r2
    209c:	d2cd      	bcs.n	203a <__udivsi3+0x3a>
    209e:	09c3      	lsrs	r3, r0, #7
    20a0:	428b      	cmp	r3, r1
    20a2:	d301      	bcc.n	20a8 <__udivsi3+0xa8>
    20a4:	01cb      	lsls	r3, r1, #7
    20a6:	1ac0      	subs	r0, r0, r3
    20a8:	4152      	adcs	r2, r2
    20aa:	0983      	lsrs	r3, r0, #6
    20ac:	428b      	cmp	r3, r1
    20ae:	d301      	bcc.n	20b4 <__udivsi3+0xb4>
    20b0:	018b      	lsls	r3, r1, #6
    20b2:	1ac0      	subs	r0, r0, r3
    20b4:	4152      	adcs	r2, r2
    20b6:	0943      	lsrs	r3, r0, #5
    20b8:	428b      	cmp	r3, r1
    20ba:	d301      	bcc.n	20c0 <__udivsi3+0xc0>
    20bc:	014b      	lsls	r3, r1, #5
    20be:	1ac0      	subs	r0, r0, r3
    20c0:	4152      	adcs	r2, r2
    20c2:	0903      	lsrs	r3, r0, #4
    20c4:	428b      	cmp	r3, r1
    20c6:	d301      	bcc.n	20cc <__udivsi3+0xcc>
    20c8:	010b      	lsls	r3, r1, #4
    20ca:	1ac0      	subs	r0, r0, r3
    20cc:	4152      	adcs	r2, r2
    20ce:	08c3      	lsrs	r3, r0, #3
    20d0:	428b      	cmp	r3, r1
    20d2:	d301      	bcc.n	20d8 <__udivsi3+0xd8>
    20d4:	00cb      	lsls	r3, r1, #3
    20d6:	1ac0      	subs	r0, r0, r3
    20d8:	4152      	adcs	r2, r2
    20da:	0883      	lsrs	r3, r0, #2
    20dc:	428b      	cmp	r3, r1
    20de:	d301      	bcc.n	20e4 <__udivsi3+0xe4>
    20e0:	008b      	lsls	r3, r1, #2
    20e2:	1ac0      	subs	r0, r0, r3
    20e4:	4152      	adcs	r2, r2
    20e6:	0843      	lsrs	r3, r0, #1
    20e8:	428b      	cmp	r3, r1
    20ea:	d301      	bcc.n	20f0 <__udivsi3+0xf0>
    20ec:	004b      	lsls	r3, r1, #1
    20ee:	1ac0      	subs	r0, r0, r3
    20f0:	4152      	adcs	r2, r2
    20f2:	1a41      	subs	r1, r0, r1
    20f4:	d200      	bcs.n	20f8 <__udivsi3+0xf8>
    20f6:	4601      	mov	r1, r0
    20f8:	4152      	adcs	r2, r2
    20fa:	4610      	mov	r0, r2
    20fc:	4770      	bx	lr
    20fe:	e7ff      	b.n	2100 <__udivsi3+0x100>
    2100:	b501      	push	{r0, lr}
    2102:	2000      	movs	r0, #0
    2104:	f000 f806 	bl	2114 <__aeabi_idiv0>
    2108:	bd02      	pop	{r1, pc}
    210a:	46c0      	nop			; (mov r8, r8)

0000210c <__aeabi_uidivmod>:
    210c:	2900      	cmp	r1, #0
    210e:	d0f7      	beq.n	2100 <__udivsi3+0x100>
    2110:	e776      	b.n	2000 <__udivsi3>
    2112:	4770      	bx	lr

00002114 <__aeabi_idiv0>:
    2114:	4770      	bx	lr
    2116:	46c0      	nop			; (mov r8, r8)

00002118 <__libc_init_array>:
    2118:	b570      	push	{r4, r5, r6, lr}
    211a:	2600      	movs	r6, #0
    211c:	4d0c      	ldr	r5, [pc, #48]	; (2150 <__libc_init_array+0x38>)
    211e:	4c0d      	ldr	r4, [pc, #52]	; (2154 <__libc_init_array+0x3c>)
    2120:	1b64      	subs	r4, r4, r5
    2122:	10a4      	asrs	r4, r4, #2
    2124:	42a6      	cmp	r6, r4
    2126:	d109      	bne.n	213c <__libc_init_array+0x24>
    2128:	2600      	movs	r6, #0
    212a:	f000 f8bd 	bl	22a8 <_init>
    212e:	4d0a      	ldr	r5, [pc, #40]	; (2158 <__libc_init_array+0x40>)
    2130:	4c0a      	ldr	r4, [pc, #40]	; (215c <__libc_init_array+0x44>)
    2132:	1b64      	subs	r4, r4, r5
    2134:	10a4      	asrs	r4, r4, #2
    2136:	42a6      	cmp	r6, r4
    2138:	d105      	bne.n	2146 <__libc_init_array+0x2e>
    213a:	bd70      	pop	{r4, r5, r6, pc}
    213c:	00b3      	lsls	r3, r6, #2
    213e:	58eb      	ldr	r3, [r5, r3]
    2140:	4798      	blx	r3
    2142:	3601      	adds	r6, #1
    2144:	e7ee      	b.n	2124 <__libc_init_array+0xc>
    2146:	00b3      	lsls	r3, r6, #2
    2148:	58eb      	ldr	r3, [r5, r3]
    214a:	4798      	blx	r3
    214c:	3601      	adds	r6, #1
    214e:	e7f2      	b.n	2136 <__libc_init_array+0x1e>
    2150:	200000e8 	.word	0x200000e8
    2154:	200000e8 	.word	0x200000e8
    2158:	200000e8 	.word	0x200000e8
    215c:	200000f8 	.word	0x200000f8

00002160 <malloc>:
    2160:	b510      	push	{r4, lr}
    2162:	4b03      	ldr	r3, [pc, #12]	; (2170 <malloc+0x10>)
    2164:	0001      	movs	r1, r0
    2166:	6818      	ldr	r0, [r3, #0]
    2168:	f000 f816 	bl	2198 <_malloc_r>
    216c:	bd10      	pop	{r4, pc}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	20000084 	.word	0x20000084

00002174 <memcpy>:
    2174:	2300      	movs	r3, #0
    2176:	b510      	push	{r4, lr}
    2178:	429a      	cmp	r2, r3
    217a:	d100      	bne.n	217e <memcpy+0xa>
    217c:	bd10      	pop	{r4, pc}
    217e:	5ccc      	ldrb	r4, [r1, r3]
    2180:	54c4      	strb	r4, [r0, r3]
    2182:	3301      	adds	r3, #1
    2184:	e7f8      	b.n	2178 <memcpy+0x4>

00002186 <memset>:
    2186:	0003      	movs	r3, r0
    2188:	1882      	adds	r2, r0, r2
    218a:	4293      	cmp	r3, r2
    218c:	d100      	bne.n	2190 <memset+0xa>
    218e:	4770      	bx	lr
    2190:	7019      	strb	r1, [r3, #0]
    2192:	3301      	adds	r3, #1
    2194:	e7f9      	b.n	218a <memset+0x4>
	...

00002198 <_malloc_r>:
    2198:	2303      	movs	r3, #3
    219a:	b570      	push	{r4, r5, r6, lr}
    219c:	1ccd      	adds	r5, r1, #3
    219e:	439d      	bics	r5, r3
    21a0:	3508      	adds	r5, #8
    21a2:	0006      	movs	r6, r0
    21a4:	2d0c      	cmp	r5, #12
    21a6:	d21e      	bcs.n	21e6 <_malloc_r+0x4e>
    21a8:	250c      	movs	r5, #12
    21aa:	42a9      	cmp	r1, r5
    21ac:	d81d      	bhi.n	21ea <_malloc_r+0x52>
    21ae:	0030      	movs	r0, r6
    21b0:	f000 f869 	bl	2286 <__malloc_lock>
    21b4:	4a25      	ldr	r2, [pc, #148]	; (224c <_malloc_r+0xb4>)
    21b6:	6814      	ldr	r4, [r2, #0]
    21b8:	0021      	movs	r1, r4
    21ba:	2900      	cmp	r1, #0
    21bc:	d119      	bne.n	21f2 <_malloc_r+0x5a>
    21be:	4c24      	ldr	r4, [pc, #144]	; (2250 <_malloc_r+0xb8>)
    21c0:	6823      	ldr	r3, [r4, #0]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d103      	bne.n	21ce <_malloc_r+0x36>
    21c6:	0030      	movs	r0, r6
    21c8:	f000 f844 	bl	2254 <_sbrk_r>
    21cc:	6020      	str	r0, [r4, #0]
    21ce:	0029      	movs	r1, r5
    21d0:	0030      	movs	r0, r6
    21d2:	f000 f83f 	bl	2254 <_sbrk_r>
    21d6:	1c43      	adds	r3, r0, #1
    21d8:	d12c      	bne.n	2234 <_malloc_r+0x9c>
    21da:	230c      	movs	r3, #12
    21dc:	0030      	movs	r0, r6
    21de:	6033      	str	r3, [r6, #0]
    21e0:	f000 f852 	bl	2288 <__malloc_unlock>
    21e4:	e003      	b.n	21ee <_malloc_r+0x56>
    21e6:	2d00      	cmp	r5, #0
    21e8:	dadf      	bge.n	21aa <_malloc_r+0x12>
    21ea:	230c      	movs	r3, #12
    21ec:	6033      	str	r3, [r6, #0]
    21ee:	2000      	movs	r0, #0
    21f0:	bd70      	pop	{r4, r5, r6, pc}
    21f2:	680b      	ldr	r3, [r1, #0]
    21f4:	1b5b      	subs	r3, r3, r5
    21f6:	d41a      	bmi.n	222e <_malloc_r+0x96>
    21f8:	2b0b      	cmp	r3, #11
    21fa:	d903      	bls.n	2204 <_malloc_r+0x6c>
    21fc:	600b      	str	r3, [r1, #0]
    21fe:	18cc      	adds	r4, r1, r3
    2200:	6025      	str	r5, [r4, #0]
    2202:	e003      	b.n	220c <_malloc_r+0x74>
    2204:	428c      	cmp	r4, r1
    2206:	d10e      	bne.n	2226 <_malloc_r+0x8e>
    2208:	6863      	ldr	r3, [r4, #4]
    220a:	6013      	str	r3, [r2, #0]
    220c:	0030      	movs	r0, r6
    220e:	f000 f83b 	bl	2288 <__malloc_unlock>
    2212:	0020      	movs	r0, r4
    2214:	2207      	movs	r2, #7
    2216:	300b      	adds	r0, #11
    2218:	1d23      	adds	r3, r4, #4
    221a:	4390      	bics	r0, r2
    221c:	1ac3      	subs	r3, r0, r3
    221e:	d0e7      	beq.n	21f0 <_malloc_r+0x58>
    2220:	425a      	negs	r2, r3
    2222:	50e2      	str	r2, [r4, r3]
    2224:	e7e4      	b.n	21f0 <_malloc_r+0x58>
    2226:	684b      	ldr	r3, [r1, #4]
    2228:	6063      	str	r3, [r4, #4]
    222a:	000c      	movs	r4, r1
    222c:	e7ee      	b.n	220c <_malloc_r+0x74>
    222e:	000c      	movs	r4, r1
    2230:	6849      	ldr	r1, [r1, #4]
    2232:	e7c2      	b.n	21ba <_malloc_r+0x22>
    2234:	2303      	movs	r3, #3
    2236:	1cc4      	adds	r4, r0, #3
    2238:	439c      	bics	r4, r3
    223a:	42a0      	cmp	r0, r4
    223c:	d0e0      	beq.n	2200 <_malloc_r+0x68>
    223e:	1a21      	subs	r1, r4, r0
    2240:	0030      	movs	r0, r6
    2242:	f000 f807 	bl	2254 <_sbrk_r>
    2246:	1c43      	adds	r3, r0, #1
    2248:	d1da      	bne.n	2200 <_malloc_r+0x68>
    224a:	e7c6      	b.n	21da <_malloc_r+0x42>
    224c:	20000898 	.word	0x20000898
    2250:	2000089c 	.word	0x2000089c

00002254 <_sbrk_r>:
    2254:	2300      	movs	r3, #0
    2256:	b570      	push	{r4, r5, r6, lr}
    2258:	4c06      	ldr	r4, [pc, #24]	; (2274 <_sbrk_r+0x20>)
    225a:	0005      	movs	r5, r0
    225c:	0008      	movs	r0, r1
    225e:	6023      	str	r3, [r4, #0]
    2260:	f000 f814 	bl	228c <_sbrk>
    2264:	1c43      	adds	r3, r0, #1
    2266:	d103      	bne.n	2270 <_sbrk_r+0x1c>
    2268:	6823      	ldr	r3, [r4, #0]
    226a:	2b00      	cmp	r3, #0
    226c:	d000      	beq.n	2270 <_sbrk_r+0x1c>
    226e:	602b      	str	r3, [r5, #0]
    2270:	bd70      	pop	{r4, r5, r6, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	200008a4 	.word	0x200008a4

00002278 <strlen>:
    2278:	2300      	movs	r3, #0
    227a:	5cc2      	ldrb	r2, [r0, r3]
    227c:	3301      	adds	r3, #1
    227e:	2a00      	cmp	r2, #0
    2280:	d1fb      	bne.n	227a <strlen+0x2>
    2282:	1e58      	subs	r0, r3, #1
    2284:	4770      	bx	lr

00002286 <__malloc_lock>:
    2286:	4770      	bx	lr

00002288 <__malloc_unlock>:
    2288:	4770      	bx	lr
	...

0000228c <_sbrk>:
    228c:	4a04      	ldr	r2, [pc, #16]	; (22a0 <_sbrk+0x14>)
    228e:	6813      	ldr	r3, [r2, #0]
    2290:	2b00      	cmp	r3, #0
    2292:	d003      	beq.n	229c <_sbrk+0x10>
    2294:	1818      	adds	r0, r3, r0
    2296:	6010      	str	r0, [r2, #0]
    2298:	0018      	movs	r0, r3
    229a:	4770      	bx	lr
    229c:	4b01      	ldr	r3, [pc, #4]	; (22a4 <_sbrk+0x18>)
    229e:	e7f9      	b.n	2294 <_sbrk+0x8>
    22a0:	200008a0 	.word	0x200008a0
    22a4:	200008a8 	.word	0x200008a8

000022a8 <_init>:
    22a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22ae:	bc08      	pop	{r3}
    22b0:	469e      	mov	lr, r3
    22b2:	4770      	bx	lr

000022b4 <_fini>:
    22b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22ba:	bc08      	pop	{r3}
    22bc:	469e      	mov	lr, r3
    22be:	4770      	bx	lr

000022c0 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    22c8:	0813 0000 06f5 0000 0651 0000               ........Q...

000022d4 <_ZL14STRING_PRODUCT>:
    22d4:	7241 7564 6e69 206f 655a 6f72 0000          Arduino Zero..

000022e2 <_ZL15STRING_LANGUAGE>:
    22e2:	0304 0409                                   ....

000022e6 <_ZL19STRING_MANUFACTURER>:
    22e6:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

000022f2 <_ZL21USB_DeviceDescriptorB>:
    22f2:	0112 0200 02ef 4001 2341 804d 0100 0201     .......@A#M.....
    2302:	0103                                        ..

00002304 <g_APinDescription>:
    2304:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    2314:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    2324:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    2334:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    2344:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    2354:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    2364:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    2374:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    2384:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    2394:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    23a4:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    23b4:	0005 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    23c4:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    23d4:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    23e4:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    23f4:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    2404:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    2414:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    2424:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    2434:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    2444:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    2454:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    2464:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    2474:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    2484:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    2494:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    24a4:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    24b4:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    24c4:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    24d4:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    24e4:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    24f4:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    2504:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    2514:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    2524:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    2534:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    2544:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    2554:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    2564:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    2574:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    2584:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    2594:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    25a4:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    25b4:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    25c4:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    25d4:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    25e4:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    25f4:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    2604:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    2614:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    2624:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2634:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    2644:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    2654:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2664:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    2674:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    2684:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2694:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    26a4:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    26b4:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    26c4:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    26d4:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    26e4:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    26f4:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    2704:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    2714:	0001 0000 0002 0000 0014 ffff ffff 0002     ................

00002724 <_ZTV4Uart>:
	...
    272c:	1cd1 0000 1fc5 0000 1c13 0000 1bd5 0000     ................
    273c:	1bed 0000 1d85 0000 19e9 0000 19d9 0000     ................
    274c:	1a65 0000 19ff 0000 19d5 0000               e...........

00002758 <_ZTV7Serial_>:
	...
    2760:	1dd1 0000 1dfd 0000 1dcd 0000 1df1 0000     ................
    2770:	1de5 0000 1e35 0000 1e19 0000               ....5.......

0000277c <__EH_FRAME_BEGIN__>:
    277c:	0000 0000                                   ....
